/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VLegalFORel;
import vn.gov.hoabinh.model.VLegalFORelModel;
import vn.gov.hoabinh.service.persistence.VLegalFORelPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VLegalFORel service. Represents a row in the &quot;VLegalFORel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VLegalFORelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VLegalFORelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VLegalFORelImpl
 * @see VLegalFORel
 * @see VLegalFORelModel
 * @generated
 */
@ProviderType
public class VLegalFORelModelImpl extends BaseModelImpl<VLegalFORel>
	implements VLegalFORelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a v legal f o rel model instance should use the {@link VLegalFORel} interface instead.
	 */
	public static final String TABLE_NAME = "VLegalFORel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fieldId", Types.VARCHAR },
			{ "orgId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fieldId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table VLegalFORel (fieldId VARCHAR(75) not null,orgId VARCHAR(75) not null,primary key (fieldId, orgId))";
	public static final String TABLE_SQL_DROP = "drop table VLegalFORel";
	public static final String ORDER_BY_JPQL = " ORDER BY vLegalFORel.id.fieldId DESC, vLegalFORel.id.orgId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VLegalFORel.fieldId DESC, VLegalFORel.orgId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VLegalFORel"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VLegalFORel"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VLegalFORel"),
			true);
	public static final long FIELDID_COLUMN_BITMASK = 1L;
	public static final long ORGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VLegalFORel"));

	public VLegalFORelModelImpl() {
	}

	@Override
	public VLegalFORelPK getPrimaryKey() {
		return new VLegalFORelPK(_fieldId, _orgId);
	}

	@Override
	public void setPrimaryKey(VLegalFORelPK primaryKey) {
		setFieldId(primaryKey.fieldId);
		setOrgId(primaryKey.orgId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new VLegalFORelPK(_fieldId, _orgId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((VLegalFORelPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VLegalFORel.class;
	}

	@Override
	public String getModelClassName() {
		return VLegalFORel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fieldId", getFieldId());
		attributes.put("orgId", getOrgId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String fieldId = (String)attributes.get("fieldId");

		if (fieldId != null) {
			setFieldId(fieldId);
		}

		String orgId = (String)attributes.get("orgId");

		if (orgId != null) {
			setOrgId(orgId);
		}
	}

	@Override
	public String getFieldId() {
		if (_fieldId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldId;
		}
	}

	@Override
	public void setFieldId(String fieldId) {
		_columnBitmask = -1L;

		if (_originalFieldId == null) {
			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public String getOriginalFieldId() {
		return GetterUtil.getString(_originalFieldId);
	}

	@Override
	public String getOrgId() {
		if (_orgId == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgId;
		}
	}

	@Override
	public void setOrgId(String orgId) {
		_columnBitmask = -1L;

		if (_originalOrgId == null) {
			_originalOrgId = _orgId;
		}

		_orgId = orgId;
	}

	public String getOriginalOrgId() {
		return GetterUtil.getString(_originalOrgId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VLegalFORel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VLegalFORel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VLegalFORelImpl vLegalFORelImpl = new VLegalFORelImpl();

		vLegalFORelImpl.setFieldId(getFieldId());
		vLegalFORelImpl.setOrgId(getOrgId());

		vLegalFORelImpl.resetOriginalValues();

		return vLegalFORelImpl;
	}

	@Override
	public int compareTo(VLegalFORel vLegalFORel) {
		int value = 0;

		value = getFieldId().compareTo(vLegalFORel.getFieldId());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getOrgId().compareTo(vLegalFORel.getOrgId());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VLegalFORel)) {
			return false;
		}

		VLegalFORel vLegalFORel = (VLegalFORel)obj;

		VLegalFORelPK primaryKey = vLegalFORel.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VLegalFORelModelImpl vLegalFORelModelImpl = this;

		vLegalFORelModelImpl._originalFieldId = vLegalFORelModelImpl._fieldId;

		vLegalFORelModelImpl._originalOrgId = vLegalFORelModelImpl._orgId;

		vLegalFORelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VLegalFORel> toCacheModel() {
		VLegalFORelCacheModel vLegalFORelCacheModel = new VLegalFORelCacheModel();

		vLegalFORelCacheModel.vLegalFORelPK = getPrimaryKey();

		vLegalFORelCacheModel.fieldId = getFieldId();

		String fieldId = vLegalFORelCacheModel.fieldId;

		if ((fieldId != null) && (fieldId.length() == 0)) {
			vLegalFORelCacheModel.fieldId = null;
		}

		vLegalFORelCacheModel.orgId = getOrgId();

		String orgId = vLegalFORelCacheModel.orgId;

		if ((orgId != null) && (orgId.length() == 0)) {
			vLegalFORelCacheModel.orgId = null;
		}

		return vLegalFORelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{fieldId=");
		sb.append(getFieldId());
		sb.append(", orgId=");
		sb.append(getOrgId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VLegalFORel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgId</column-name><column-value><![CDATA[");
		sb.append(getOrgId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VLegalFORel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VLegalFORel.class
		};
	private String _fieldId;
	private String _originalFieldId;
	private String _orgId;
	private String _originalOrgId;
	private long _columnBitmask;
	private VLegalFORel _escapedModel;
}