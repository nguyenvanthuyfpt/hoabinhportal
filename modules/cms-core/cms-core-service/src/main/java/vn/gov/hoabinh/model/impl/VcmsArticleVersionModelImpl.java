/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VcmsArticleVersion;
import vn.gov.hoabinh.model.VcmsArticleVersionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VcmsArticleVersion service. Represents a row in the &quot;VcmsArticleVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VcmsArticleVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VcmsArticleVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VcmsArticleVersionImpl
 * @see VcmsArticleVersion
 * @see VcmsArticleVersionModel
 * @generated
 */
@ProviderType
public class VcmsArticleVersionModelImpl extends BaseModelImpl<VcmsArticleVersion>
	implements VcmsArticleVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vcms article version model instance should use the {@link VcmsArticleVersion} interface instead.
	 */
	public static final String TABLE_NAME = "VcmsArticleVersion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "articleVersionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "articleId", Types.VARCHAR },
			{ "createdByUser", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "typeIds", Types.VARCHAR },
			{ "status", Types.BIGINT },
			{ "versionName", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "lead", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "hasImage", Types.BOOLEAN },
			{ "imageTitle", Types.VARCHAR },
			{ "image", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "userHit", Types.INTEGER },
			{ "author", Types.VARCHAR },
			{ "source", Types.VARCHAR },
			{ "discussible", Types.BOOLEAN },
			{ "hasAttachment", Types.BOOLEAN },
			{ "hasPoll", Types.BOOLEAN },
			{ "pollId", Types.VARCHAR },
			{ "publishedByUser", Types.VARCHAR },
			{ "modifiedByUser", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "publishedDate", Types.TIMESTAMP },
			{ "effectiveDate", Types.TIMESTAMP },
			{ "expireDate", Types.TIMESTAMP },
			{ "stickyExpireDate", Types.TIMESTAMP },
			{ "sticky", Types.BOOLEAN },
			{ "stickyNeverExpired", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("articleVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("versionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lead", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("imageTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("discussible", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasAttachment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasPoll", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pollId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectiveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stickyExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sticky", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stickyNeverExpired", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table VcmsArticleVersion (articleVersionId LONG not null primary key,groupId LONG,companyId LONG,articleId VARCHAR(75) null,createdByUser VARCHAR(75) null,createdDate DATE null,typeIds VARCHAR(75) null,status LONG,versionName VARCHAR(75) null,title VARCHAR(75) null,lead VARCHAR(75) null,content VARCHAR(75) null,hasImage BOOLEAN,imageTitle VARCHAR(75) null,image VARCHAR(75) null,language VARCHAR(75) null,userHit INTEGER,author VARCHAR(75) null,source VARCHAR(75) null,discussible BOOLEAN,hasAttachment BOOLEAN,hasPoll BOOLEAN,pollId VARCHAR(75) null,publishedByUser VARCHAR(75) null,modifiedByUser VARCHAR(75) null,modifiedDate DATE null,publishedDate DATE null,effectiveDate DATE null,expireDate DATE null,stickyExpireDate DATE null,sticky BOOLEAN,stickyNeverExpired BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table VcmsArticleVersion";
	public static final String ORDER_BY_JPQL = " ORDER BY vcmsArticleVersion.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VcmsArticleVersion.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VcmsArticleVersion"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VcmsArticleVersion"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VcmsArticleVersion"),
			true);
	public static final long ARTICLEID_COLUMN_BITMASK = 1L;
	public static final long CREATEDDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VcmsArticleVersion"));

	public VcmsArticleVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VcmsArticleVersion.class;
	}

	@Override
	public String getModelClassName() {
		return VcmsArticleVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("articleVersionId", getArticleVersionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("articleId", getArticleId());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("typeIds", getTypeIds());
		attributes.put("status", getStatus());
		attributes.put("versionName", getVersionName());
		attributes.put("title", getTitle());
		attributes.put("lead", getLead());
		attributes.put("content", getContent());
		attributes.put("hasImage", getHasImage());
		attributes.put("imageTitle", getImageTitle());
		attributes.put("image", getImage());
		attributes.put("language", getLanguage());
		attributes.put("userHit", getUserHit());
		attributes.put("author", getAuthor());
		attributes.put("source", getSource());
		attributes.put("discussible", getDiscussible());
		attributes.put("hasAttachment", getHasAttachment());
		attributes.put("hasPoll", getHasPoll());
		attributes.put("pollId", getPollId());
		attributes.put("publishedByUser", getPublishedByUser());
		attributes.put("modifiedByUser", getModifiedByUser());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("expireDate", getExpireDate());
		attributes.put("stickyExpireDate", getStickyExpireDate());
		attributes.put("sticky", getSticky());
		attributes.put("stickyNeverExpired", getStickyNeverExpired());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long articleVersionId = (Long)attributes.get("articleVersionId");

		if (articleVersionId != null) {
			setArticleVersionId(articleVersionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String articleId = (String)attributes.get("articleId");

		if (articleId != null) {
			setArticleId(articleId);
		}

		String createdByUser = (String)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String typeIds = (String)attributes.get("typeIds");

		if (typeIds != null) {
			setTypeIds(typeIds);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String versionName = (String)attributes.get("versionName");

		if (versionName != null) {
			setVersionName(versionName);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String lead = (String)attributes.get("lead");

		if (lead != null) {
			setLead(lead);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Boolean hasImage = (Boolean)attributes.get("hasImage");

		if (hasImage != null) {
			setHasImage(hasImage);
		}

		String imageTitle = (String)attributes.get("imageTitle");

		if (imageTitle != null) {
			setImageTitle(imageTitle);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Integer userHit = (Integer)attributes.get("userHit");

		if (userHit != null) {
			setUserHit(userHit);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		Boolean discussible = (Boolean)attributes.get("discussible");

		if (discussible != null) {
			setDiscussible(discussible);
		}

		Boolean hasAttachment = (Boolean)attributes.get("hasAttachment");

		if (hasAttachment != null) {
			setHasAttachment(hasAttachment);
		}

		Boolean hasPoll = (Boolean)attributes.get("hasPoll");

		if (hasPoll != null) {
			setHasPoll(hasPoll);
		}

		String pollId = (String)attributes.get("pollId");

		if (pollId != null) {
			setPollId(pollId);
		}

		String publishedByUser = (String)attributes.get("publishedByUser");

		if (publishedByUser != null) {
			setPublishedByUser(publishedByUser);
		}

		String modifiedByUser = (String)attributes.get("modifiedByUser");

		if (modifiedByUser != null) {
			setModifiedByUser(modifiedByUser);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		Date stickyExpireDate = (Date)attributes.get("stickyExpireDate");

		if (stickyExpireDate != null) {
			setStickyExpireDate(stickyExpireDate);
		}

		Boolean sticky = (Boolean)attributes.get("sticky");

		if (sticky != null) {
			setSticky(sticky);
		}

		Boolean stickyNeverExpired = (Boolean)attributes.get(
				"stickyNeverExpired");

		if (stickyNeverExpired != null) {
			setStickyNeverExpired(stickyNeverExpired);
		}
	}

	@Override
	public long getArticleVersionId() {
		return _articleVersionId;
	}

	@Override
	public void setArticleVersionId(long articleVersionId) {
		_articleVersionId = articleVersionId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getArticleId() {
		if (_articleId == null) {
			return StringPool.BLANK;
		}
		else {
			return _articleId;
		}
	}

	@Override
	public void setArticleId(String articleId) {
		_columnBitmask |= ARTICLEID_COLUMN_BITMASK;

		if (_originalArticleId == null) {
			_originalArticleId = _articleId;
		}

		_articleId = articleId;
	}

	public String getOriginalArticleId() {
		return GetterUtil.getString(_originalArticleId);
	}

	@Override
	public String getCreatedByUser() {
		if (_createdByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUser;
		}
	}

	@Override
	public void setCreatedByUser(String createdByUser) {
		_createdByUser = createdByUser;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@Override
	public String getTypeIds() {
		if (_typeIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeIds;
		}
	}

	@Override
	public void setTypeIds(String typeIds) {
		_typeIds = typeIds;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@Override
	public String getVersionName() {
		if (_versionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionName;
		}
	}

	@Override
	public void setVersionName(String versionName) {
		_versionName = versionName;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getLead() {
		if (_lead == null) {
			return StringPool.BLANK;
		}
		else {
			return _lead;
		}
	}

	@Override
	public void setLead(String lead) {
		_lead = lead;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public boolean getHasImage() {
		return _hasImage;
	}

	@Override
	public boolean isHasImage() {
		return _hasImage;
	}

	@Override
	public void setHasImage(boolean hasImage) {
		_hasImage = hasImage;
	}

	@Override
	public String getImageTitle() {
		if (_imageTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageTitle;
		}
	}

	@Override
	public void setImageTitle(String imageTitle) {
		_imageTitle = imageTitle;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public boolean getDiscussible() {
		return _discussible;
	}

	@Override
	public boolean isDiscussible() {
		return _discussible;
	}

	@Override
	public void setDiscussible(boolean discussible) {
		_discussible = discussible;
	}

	@Override
	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	@Override
	public boolean getHasPoll() {
		return _hasPoll;
	}

	@Override
	public boolean isHasPoll() {
		return _hasPoll;
	}

	@Override
	public void setHasPoll(boolean hasPoll) {
		_hasPoll = hasPoll;
	}

	@Override
	public String getPollId() {
		if (_pollId == null) {
			return StringPool.BLANK;
		}
		else {
			return _pollId;
		}
	}

	@Override
	public void setPollId(String pollId) {
		_pollId = pollId;
	}

	@Override
	public String getPublishedByUser() {
		if (_publishedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishedByUser;
		}
	}

	@Override
	public void setPublishedByUser(String publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@Override
	public String getModifiedByUser() {
		if (_modifiedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedByUser;
		}
	}

	@Override
	public void setModifiedByUser(String modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_expireDate = expireDate;
	}

	@Override
	public Date getStickyExpireDate() {
		return _stickyExpireDate;
	}

	@Override
	public void setStickyExpireDate(Date stickyExpireDate) {
		_stickyExpireDate = stickyExpireDate;
	}

	@Override
	public boolean getSticky() {
		return _sticky;
	}

	@Override
	public boolean isSticky() {
		return _sticky;
	}

	@Override
	public void setSticky(boolean sticky) {
		_sticky = sticky;
	}

	@Override
	public boolean getStickyNeverExpired() {
		return _stickyNeverExpired;
	}

	@Override
	public boolean isStickyNeverExpired() {
		return _stickyNeverExpired;
	}

	@Override
	public void setStickyNeverExpired(boolean stickyNeverExpired) {
		_stickyNeverExpired = stickyNeverExpired;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VcmsArticleVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VcmsArticleVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VcmsArticleVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VcmsArticleVersionImpl vcmsArticleVersionImpl = new VcmsArticleVersionImpl();

		vcmsArticleVersionImpl.setArticleVersionId(getArticleVersionId());
		vcmsArticleVersionImpl.setGroupId(getGroupId());
		vcmsArticleVersionImpl.setCompanyId(getCompanyId());
		vcmsArticleVersionImpl.setArticleId(getArticleId());
		vcmsArticleVersionImpl.setCreatedByUser(getCreatedByUser());
		vcmsArticleVersionImpl.setCreatedDate(getCreatedDate());
		vcmsArticleVersionImpl.setTypeIds(getTypeIds());
		vcmsArticleVersionImpl.setStatus(getStatus());
		vcmsArticleVersionImpl.setVersionName(getVersionName());
		vcmsArticleVersionImpl.setTitle(getTitle());
		vcmsArticleVersionImpl.setLead(getLead());
		vcmsArticleVersionImpl.setContent(getContent());
		vcmsArticleVersionImpl.setHasImage(getHasImage());
		vcmsArticleVersionImpl.setImageTitle(getImageTitle());
		vcmsArticleVersionImpl.setImage(getImage());
		vcmsArticleVersionImpl.setLanguage(getLanguage());
		vcmsArticleVersionImpl.setUserHit(getUserHit());
		vcmsArticleVersionImpl.setAuthor(getAuthor());
		vcmsArticleVersionImpl.setSource(getSource());
		vcmsArticleVersionImpl.setDiscussible(getDiscussible());
		vcmsArticleVersionImpl.setHasAttachment(getHasAttachment());
		vcmsArticleVersionImpl.setHasPoll(getHasPoll());
		vcmsArticleVersionImpl.setPollId(getPollId());
		vcmsArticleVersionImpl.setPublishedByUser(getPublishedByUser());
		vcmsArticleVersionImpl.setModifiedByUser(getModifiedByUser());
		vcmsArticleVersionImpl.setModifiedDate(getModifiedDate());
		vcmsArticleVersionImpl.setPublishedDate(getPublishedDate());
		vcmsArticleVersionImpl.setEffectiveDate(getEffectiveDate());
		vcmsArticleVersionImpl.setExpireDate(getExpireDate());
		vcmsArticleVersionImpl.setStickyExpireDate(getStickyExpireDate());
		vcmsArticleVersionImpl.setSticky(getSticky());
		vcmsArticleVersionImpl.setStickyNeverExpired(getStickyNeverExpired());

		vcmsArticleVersionImpl.resetOriginalValues();

		return vcmsArticleVersionImpl;
	}

	@Override
	public int compareTo(VcmsArticleVersion vcmsArticleVersion) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(),
				vcmsArticleVersion.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VcmsArticleVersion)) {
			return false;
		}

		VcmsArticleVersion vcmsArticleVersion = (VcmsArticleVersion)obj;

		long primaryKey = vcmsArticleVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VcmsArticleVersionModelImpl vcmsArticleVersionModelImpl = this;

		vcmsArticleVersionModelImpl._originalArticleId = vcmsArticleVersionModelImpl._articleId;

		vcmsArticleVersionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VcmsArticleVersion> toCacheModel() {
		VcmsArticleVersionCacheModel vcmsArticleVersionCacheModel = new VcmsArticleVersionCacheModel();

		vcmsArticleVersionCacheModel.articleVersionId = getArticleVersionId();

		vcmsArticleVersionCacheModel.groupId = getGroupId();

		vcmsArticleVersionCacheModel.companyId = getCompanyId();

		vcmsArticleVersionCacheModel.articleId = getArticleId();

		String articleId = vcmsArticleVersionCacheModel.articleId;

		if ((articleId != null) && (articleId.length() == 0)) {
			vcmsArticleVersionCacheModel.articleId = null;
		}

		vcmsArticleVersionCacheModel.createdByUser = getCreatedByUser();

		String createdByUser = vcmsArticleVersionCacheModel.createdByUser;

		if ((createdByUser != null) && (createdByUser.length() == 0)) {
			vcmsArticleVersionCacheModel.createdByUser = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vcmsArticleVersionCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.createdDate = Long.MIN_VALUE;
		}

		vcmsArticleVersionCacheModel.typeIds = getTypeIds();

		String typeIds = vcmsArticleVersionCacheModel.typeIds;

		if ((typeIds != null) && (typeIds.length() == 0)) {
			vcmsArticleVersionCacheModel.typeIds = null;
		}

		vcmsArticleVersionCacheModel.status = getStatus();

		vcmsArticleVersionCacheModel.versionName = getVersionName();

		String versionName = vcmsArticleVersionCacheModel.versionName;

		if ((versionName != null) && (versionName.length() == 0)) {
			vcmsArticleVersionCacheModel.versionName = null;
		}

		vcmsArticleVersionCacheModel.title = getTitle();

		String title = vcmsArticleVersionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			vcmsArticleVersionCacheModel.title = null;
		}

		vcmsArticleVersionCacheModel.lead = getLead();

		String lead = vcmsArticleVersionCacheModel.lead;

		if ((lead != null) && (lead.length() == 0)) {
			vcmsArticleVersionCacheModel.lead = null;
		}

		vcmsArticleVersionCacheModel.content = getContent();

		String content = vcmsArticleVersionCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			vcmsArticleVersionCacheModel.content = null;
		}

		vcmsArticleVersionCacheModel.hasImage = getHasImage();

		vcmsArticleVersionCacheModel.imageTitle = getImageTitle();

		String imageTitle = vcmsArticleVersionCacheModel.imageTitle;

		if ((imageTitle != null) && (imageTitle.length() == 0)) {
			vcmsArticleVersionCacheModel.imageTitle = null;
		}

		vcmsArticleVersionCacheModel.image = getImage();

		String image = vcmsArticleVersionCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			vcmsArticleVersionCacheModel.image = null;
		}

		vcmsArticleVersionCacheModel.language = getLanguage();

		String language = vcmsArticleVersionCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			vcmsArticleVersionCacheModel.language = null;
		}

		vcmsArticleVersionCacheModel.userHit = getUserHit();

		vcmsArticleVersionCacheModel.author = getAuthor();

		String author = vcmsArticleVersionCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			vcmsArticleVersionCacheModel.author = null;
		}

		vcmsArticleVersionCacheModel.source = getSource();

		String source = vcmsArticleVersionCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			vcmsArticleVersionCacheModel.source = null;
		}

		vcmsArticleVersionCacheModel.discussible = getDiscussible();

		vcmsArticleVersionCacheModel.hasAttachment = getHasAttachment();

		vcmsArticleVersionCacheModel.hasPoll = getHasPoll();

		vcmsArticleVersionCacheModel.pollId = getPollId();

		String pollId = vcmsArticleVersionCacheModel.pollId;

		if ((pollId != null) && (pollId.length() == 0)) {
			vcmsArticleVersionCacheModel.pollId = null;
		}

		vcmsArticleVersionCacheModel.publishedByUser = getPublishedByUser();

		String publishedByUser = vcmsArticleVersionCacheModel.publishedByUser;

		if ((publishedByUser != null) && (publishedByUser.length() == 0)) {
			vcmsArticleVersionCacheModel.publishedByUser = null;
		}

		vcmsArticleVersionCacheModel.modifiedByUser = getModifiedByUser();

		String modifiedByUser = vcmsArticleVersionCacheModel.modifiedByUser;

		if ((modifiedByUser != null) && (modifiedByUser.length() == 0)) {
			vcmsArticleVersionCacheModel.modifiedByUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vcmsArticleVersionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			vcmsArticleVersionCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.publishedDate = Long.MIN_VALUE;
		}

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			vcmsArticleVersionCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			vcmsArticleVersionCacheModel.expireDate = expireDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.expireDate = Long.MIN_VALUE;
		}

		Date stickyExpireDate = getStickyExpireDate();

		if (stickyExpireDate != null) {
			vcmsArticleVersionCacheModel.stickyExpireDate = stickyExpireDate.getTime();
		}
		else {
			vcmsArticleVersionCacheModel.stickyExpireDate = Long.MIN_VALUE;
		}

		vcmsArticleVersionCacheModel.sticky = getSticky();

		vcmsArticleVersionCacheModel.stickyNeverExpired = getStickyNeverExpired();

		return vcmsArticleVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{articleVersionId=");
		sb.append(getArticleVersionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", articleId=");
		sb.append(getArticleId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", typeIds=");
		sb.append(getTypeIds());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", versionName=");
		sb.append(getVersionName());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", lead=");
		sb.append(getLead());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", hasImage=");
		sb.append(getHasImage());
		sb.append(", imageTitle=");
		sb.append(getImageTitle());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", discussible=");
		sb.append(getDiscussible());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", hasPoll=");
		sb.append(getHasPoll());
		sb.append(", pollId=");
		sb.append(getPollId());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", stickyExpireDate=");
		sb.append(getStickyExpireDate());
		sb.append(", sticky=");
		sb.append(getSticky());
		sb.append(", stickyNeverExpired=");
		sb.append(getStickyNeverExpired());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VcmsArticleVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>articleVersionId</column-name><column-value><![CDATA[");
		sb.append(getArticleVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleId</column-name><column-value><![CDATA[");
		sb.append(getArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeIds</column-name><column-value><![CDATA[");
		sb.append(getTypeIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionName</column-name><column-value><![CDATA[");
		sb.append(getVersionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lead</column-name><column-value><![CDATA[");
		sb.append(getLead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasImage</column-name><column-value><![CDATA[");
		sb.append(getHasImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageTitle</column-name><column-value><![CDATA[");
		sb.append(getImageTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discussible</column-name><column-value><![CDATA[");
		sb.append(getDiscussible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasPoll</column-name><column-value><![CDATA[");
		sb.append(getHasPoll());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pollId</column-name><column-value><![CDATA[");
		sb.append(getPollId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stickyExpireDate</column-name><column-value><![CDATA[");
		sb.append(getStickyExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sticky</column-name><column-value><![CDATA[");
		sb.append(getSticky());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stickyNeverExpired</column-name><column-value><![CDATA[");
		sb.append(getStickyNeverExpired());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VcmsArticleVersion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VcmsArticleVersion.class
		};
	private long _articleVersionId;
	private long _groupId;
	private long _companyId;
	private String _articleId;
	private String _originalArticleId;
	private String _createdByUser;
	private Date _createdDate;
	private String _typeIds;
	private long _status;
	private String _versionName;
	private String _title;
	private String _lead;
	private String _content;
	private boolean _hasImage;
	private String _imageTitle;
	private String _image;
	private String _language;
	private int _userHit;
	private String _author;
	private String _source;
	private boolean _discussible;
	private boolean _hasAttachment;
	private boolean _hasPoll;
	private String _pollId;
	private String _publishedByUser;
	private String _modifiedByUser;
	private Date _modifiedDate;
	private Date _publishedDate;
	private Date _effectiveDate;
	private Date _expireDate;
	private Date _stickyExpireDate;
	private boolean _sticky;
	private boolean _stickyNeverExpired;
	private long _columnBitmask;
	private VcmsArticleVersion _escapedModel;
}