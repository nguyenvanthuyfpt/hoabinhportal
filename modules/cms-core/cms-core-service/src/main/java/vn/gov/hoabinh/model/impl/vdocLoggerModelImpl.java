/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.vdocLogger;
import vn.gov.hoabinh.model.vdocLoggerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the vdocLogger service. Represents a row in the &quot;vdocLogger&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vdocLoggerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link vdocLoggerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see vdocLoggerImpl
 * @see vdocLogger
 * @see vdocLoggerModel
 * @generated
 */
@ProviderType
public class vdocLoggerModelImpl extends BaseModelImpl<vdocLogger>
	implements vdocLoggerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vdoc logger model instance should use the {@link vdocLogger} interface instead.
	 */
	public static final String TABLE_NAME = "vdocLogger";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loggerId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdByUser", Types.BIGINT },
			{ "entryId", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "content", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("loggerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vdocLogger (loggerId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,userId LONG,createdDate DATE null,createdByUser LONG,entryId VARCHAR(75) null,className VARCHAR(75) null,content VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vdocLogger";
	public static final String ORDER_BY_JPQL = " ORDER BY vdocLogger.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vdocLogger.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.vdocLogger"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.vdocLogger"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.vdocLogger"),
			true);
	public static final long CLASSNAME_COLUMN_BITMASK = 1L;
	public static final long ENTRYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long CREATEDDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.vdocLogger"));

	public vdocLoggerModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setLoggerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loggerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return vdocLogger.class;
	}

	@Override
	public String getModelClassName() {
		return vdocLogger.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loggerId", getLoggerId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("entryId", getEntryId());
		attributes.put("className", getClassName());
		attributes.put("content", getContent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String loggerId = (String)attributes.get("loggerId");

		if (loggerId != null) {
			setLoggerId(loggerId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long createdByUser = (Long)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		String entryId = (String)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}
	}

	@Override
	public String getLoggerId() {
		if (_loggerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _loggerId;
		}
	}

	@Override
	public void setLoggerId(String loggerId) {
		_loggerId = loggerId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@Override
	public String getEntryId() {
		if (_entryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _entryId;
		}
	}

	@Override
	public void setEntryId(String entryId) {
		_columnBitmask |= ENTRYID_COLUMN_BITMASK;

		if (_originalEntryId == null) {
			_originalEntryId = _entryId;
		}

		_entryId = entryId;
	}

	public String getOriginalEntryId() {
		return GetterUtil.getString(_originalEntryId);
	}

	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public vdocLogger toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (vdocLogger)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		vdocLoggerImpl vdocLoggerImpl = new vdocLoggerImpl();

		vdocLoggerImpl.setLoggerId(getLoggerId());
		vdocLoggerImpl.setGroupId(getGroupId());
		vdocLoggerImpl.setCompanyId(getCompanyId());
		vdocLoggerImpl.setUserId(getUserId());
		vdocLoggerImpl.setCreatedDate(getCreatedDate());
		vdocLoggerImpl.setCreatedByUser(getCreatedByUser());
		vdocLoggerImpl.setEntryId(getEntryId());
		vdocLoggerImpl.setClassName(getClassName());
		vdocLoggerImpl.setContent(getContent());

		vdocLoggerImpl.resetOriginalValues();

		return vdocLoggerImpl;
	}

	@Override
	public int compareTo(vdocLogger vdocLogger) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(), vdocLogger.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof vdocLogger)) {
			return false;
		}

		vdocLogger vdocLogger = (vdocLogger)obj;

		String primaryKey = vdocLogger.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		vdocLoggerModelImpl vdocLoggerModelImpl = this;

		vdocLoggerModelImpl._originalGroupId = vdocLoggerModelImpl._groupId;

		vdocLoggerModelImpl._setOriginalGroupId = false;

		vdocLoggerModelImpl._originalEntryId = vdocLoggerModelImpl._entryId;

		vdocLoggerModelImpl._originalClassName = vdocLoggerModelImpl._className;

		vdocLoggerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<vdocLogger> toCacheModel() {
		vdocLoggerCacheModel vdocLoggerCacheModel = new vdocLoggerCacheModel();

		vdocLoggerCacheModel.loggerId = getLoggerId();

		String loggerId = vdocLoggerCacheModel.loggerId;

		if ((loggerId != null) && (loggerId.length() == 0)) {
			vdocLoggerCacheModel.loggerId = null;
		}

		vdocLoggerCacheModel.groupId = getGroupId();

		vdocLoggerCacheModel.companyId = getCompanyId();

		vdocLoggerCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vdocLoggerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vdocLoggerCacheModel.createdDate = Long.MIN_VALUE;
		}

		vdocLoggerCacheModel.createdByUser = getCreatedByUser();

		vdocLoggerCacheModel.entryId = getEntryId();

		String entryId = vdocLoggerCacheModel.entryId;

		if ((entryId != null) && (entryId.length() == 0)) {
			vdocLoggerCacheModel.entryId = null;
		}

		vdocLoggerCacheModel.className = getClassName();

		String className = vdocLoggerCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			vdocLoggerCacheModel.className = null;
		}

		vdocLoggerCacheModel.content = getContent();

		String content = vdocLoggerCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			vdocLoggerCacheModel.content = null;
		}

		return vdocLoggerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{loggerId=");
		sb.append(getLoggerId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", entryId=");
		sb.append(getEntryId());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", content=");
		sb.append(getContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.vdocLogger");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loggerId</column-name><column-value><![CDATA[");
		sb.append(getLoggerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = vdocLogger.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			vdocLogger.class
		};
	private String _loggerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private Date _createdDate;
	private long _createdByUser;
	private String _entryId;
	private String _originalEntryId;
	private String _className;
	private String _originalClassName;
	private String _content;
	private long _columnBitmask;
	private vdocLogger _escapedModel;
}