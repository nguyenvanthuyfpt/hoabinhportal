/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VcmsCategory;
import vn.gov.hoabinh.model.VcmsCategoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VcmsCategory service. Represents a row in the &quot;VcmsCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VcmsCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VcmsCategoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VcmsCategoryImpl
 * @see VcmsCategory
 * @see VcmsCategoryModel
 * @generated
 */
@ProviderType
public class VcmsCategoryModelImpl extends BaseModelImpl<VcmsCategory>
	implements VcmsCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vcms category model instance should use the {@link VcmsCategory} interface instead.
	 */
	public static final String TABLE_NAME = "VcmsCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdByUser", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedByUser", Types.VARCHAR },
			{ "portionId", Types.VARCHAR },
			{ "parentId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "anchored", Types.BOOLEAN },
			{ "href", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "hasImage", Types.BOOLEAN },
			{ "image", Types.VARCHAR },
			{ "position", Types.INTEGER },
			{ "userHit", Types.INTEGER },
			{ "rssable", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("categoryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("anchored", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("href", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("rssable", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table VcmsCategory (categoryId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,createdDate DATE null,createdByUser VARCHAR(75) null,modifiedDate DATE null,modifiedByUser VARCHAR(75) null,portionId VARCHAR(75) null,parentId VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(75) null,anchored BOOLEAN,href VARCHAR(75) null,language VARCHAR(75) null,hasImage BOOLEAN,image VARCHAR(75) null,position INTEGER,userHit INTEGER,rssable BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table VcmsCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY vcmsCategory.position ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VcmsCategory.position ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VcmsCategory"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VcmsCategory"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VcmsCategory"),
			true);
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long LANGUAGE_COLUMN_BITMASK = 4L;
	public static final long PARENTID_COLUMN_BITMASK = 8L;
	public static final long PORTIONID_COLUMN_BITMASK = 16L;
	public static final long POSITION_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VcmsCategory"));

	public VcmsCategoryModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VcmsCategory.class;
	}

	@Override
	public String getModelClassName() {
		return VcmsCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryId", getCategoryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedByUser", getModifiedByUser());
		attributes.put("portionId", getPortionId());
		attributes.put("parentId", getParentId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("anchored", getAnchored());
		attributes.put("href", getHref());
		attributes.put("language", getLanguage());
		attributes.put("hasImage", getHasImage());
		attributes.put("image", getImage());
		attributes.put("position", getPosition());
		attributes.put("userHit", getUserHit());
		attributes.put("rssable", getRssable());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String categoryId = (String)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdByUser = (String)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String modifiedByUser = (String)attributes.get("modifiedByUser");

		if (modifiedByUser != null) {
			setModifiedByUser(modifiedByUser);
		}

		String portionId = (String)attributes.get("portionId");

		if (portionId != null) {
			setPortionId(portionId);
		}

		String parentId = (String)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean anchored = (Boolean)attributes.get("anchored");

		if (anchored != null) {
			setAnchored(anchored);
		}

		String href = (String)attributes.get("href");

		if (href != null) {
			setHref(href);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Boolean hasImage = (Boolean)attributes.get("hasImage");

		if (hasImage != null) {
			setHasImage(hasImage);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		Integer position = (Integer)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		Integer userHit = (Integer)attributes.get("userHit");

		if (userHit != null) {
			setUserHit(userHit);
		}

		Boolean rssable = (Boolean)attributes.get("rssable");

		if (rssable != null) {
			setRssable(rssable);
		}
	}

	@Override
	public String getCategoryId() {
		if (_categoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryId;
		}
	}

	@Override
	public void setCategoryId(String categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (_originalCategoryId == null) {
			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public String getOriginalCategoryId() {
		return GetterUtil.getString(_originalCategoryId);
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getCreatedByUser() {
		if (_createdByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUser;
		}
	}

	@Override
	public void setCreatedByUser(String createdByUser) {
		_createdByUser = createdByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getModifiedByUser() {
		if (_modifiedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedByUser;
		}
	}

	@Override
	public void setModifiedByUser(String modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public String getPortionId() {
		if (_portionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portionId;
		}
	}

	@Override
	public void setPortionId(String portionId) {
		_columnBitmask |= PORTIONID_COLUMN_BITMASK;

		if (_originalPortionId == null) {
			_originalPortionId = _portionId;
		}

		_portionId = portionId;
	}

	public String getOriginalPortionId() {
		return GetterUtil.getString(_originalPortionId);
	}

	@Override
	public String getParentId() {
		if (_parentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentId;
		}
	}

	@Override
	public void setParentId(String parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (_originalParentId == null) {
			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public String getOriginalParentId() {
		return GetterUtil.getString(_originalParentId);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public boolean getAnchored() {
		return _anchored;
	}

	@Override
	public boolean isAnchored() {
		return _anchored;
	}

	@Override
	public void setAnchored(boolean anchored) {
		_anchored = anchored;
	}

	@Override
	public String getHref() {
		if (_href == null) {
			return StringPool.BLANK;
		}
		else {
			return _href;
		}
	}

	@Override
	public void setHref(String href) {
		_href = href;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@Override
	public boolean getHasImage() {
		return _hasImage;
	}

	@Override
	public boolean isHasImage() {
		return _hasImage;
	}

	@Override
	public void setHasImage(boolean hasImage) {
		_hasImage = hasImage;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_columnBitmask = -1L;

		_position = position;
	}

	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@Override
	public boolean getRssable() {
		return _rssable;
	}

	@Override
	public boolean isRssable() {
		return _rssable;
	}

	@Override
	public void setRssable(boolean rssable) {
		_rssable = rssable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VcmsCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VcmsCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VcmsCategoryImpl vcmsCategoryImpl = new VcmsCategoryImpl();

		vcmsCategoryImpl.setCategoryId(getCategoryId());
		vcmsCategoryImpl.setGroupId(getGroupId());
		vcmsCategoryImpl.setCompanyId(getCompanyId());
		vcmsCategoryImpl.setCreatedDate(getCreatedDate());
		vcmsCategoryImpl.setCreatedByUser(getCreatedByUser());
		vcmsCategoryImpl.setModifiedDate(getModifiedDate());
		vcmsCategoryImpl.setModifiedByUser(getModifiedByUser());
		vcmsCategoryImpl.setPortionId(getPortionId());
		vcmsCategoryImpl.setParentId(getParentId());
		vcmsCategoryImpl.setName(getName());
		vcmsCategoryImpl.setDescription(getDescription());
		vcmsCategoryImpl.setAnchored(getAnchored());
		vcmsCategoryImpl.setHref(getHref());
		vcmsCategoryImpl.setLanguage(getLanguage());
		vcmsCategoryImpl.setHasImage(getHasImage());
		vcmsCategoryImpl.setImage(getImage());
		vcmsCategoryImpl.setPosition(getPosition());
		vcmsCategoryImpl.setUserHit(getUserHit());
		vcmsCategoryImpl.setRssable(getRssable());

		vcmsCategoryImpl.resetOriginalValues();

		return vcmsCategoryImpl;
	}

	@Override
	public int compareTo(VcmsCategory vcmsCategory) {
		int value = 0;

		if (getPosition() < vcmsCategory.getPosition()) {
			value = -1;
		}
		else if (getPosition() > vcmsCategory.getPosition()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VcmsCategory)) {
			return false;
		}

		VcmsCategory vcmsCategory = (VcmsCategory)obj;

		String primaryKey = vcmsCategory.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VcmsCategoryModelImpl vcmsCategoryModelImpl = this;

		vcmsCategoryModelImpl._originalCategoryId = vcmsCategoryModelImpl._categoryId;

		vcmsCategoryModelImpl._originalGroupId = vcmsCategoryModelImpl._groupId;

		vcmsCategoryModelImpl._setOriginalGroupId = false;

		vcmsCategoryModelImpl._originalPortionId = vcmsCategoryModelImpl._portionId;

		vcmsCategoryModelImpl._originalParentId = vcmsCategoryModelImpl._parentId;

		vcmsCategoryModelImpl._originalLanguage = vcmsCategoryModelImpl._language;

		vcmsCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VcmsCategory> toCacheModel() {
		VcmsCategoryCacheModel vcmsCategoryCacheModel = new VcmsCategoryCacheModel();

		vcmsCategoryCacheModel.categoryId = getCategoryId();

		String categoryId = vcmsCategoryCacheModel.categoryId;

		if ((categoryId != null) && (categoryId.length() == 0)) {
			vcmsCategoryCacheModel.categoryId = null;
		}

		vcmsCategoryCacheModel.groupId = getGroupId();

		vcmsCategoryCacheModel.companyId = getCompanyId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vcmsCategoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vcmsCategoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		vcmsCategoryCacheModel.createdByUser = getCreatedByUser();

		String createdByUser = vcmsCategoryCacheModel.createdByUser;

		if ((createdByUser != null) && (createdByUser.length() == 0)) {
			vcmsCategoryCacheModel.createdByUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vcmsCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vcmsCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vcmsCategoryCacheModel.modifiedByUser = getModifiedByUser();

		String modifiedByUser = vcmsCategoryCacheModel.modifiedByUser;

		if ((modifiedByUser != null) && (modifiedByUser.length() == 0)) {
			vcmsCategoryCacheModel.modifiedByUser = null;
		}

		vcmsCategoryCacheModel.portionId = getPortionId();

		String portionId = vcmsCategoryCacheModel.portionId;

		if ((portionId != null) && (portionId.length() == 0)) {
			vcmsCategoryCacheModel.portionId = null;
		}

		vcmsCategoryCacheModel.parentId = getParentId();

		String parentId = vcmsCategoryCacheModel.parentId;

		if ((parentId != null) && (parentId.length() == 0)) {
			vcmsCategoryCacheModel.parentId = null;
		}

		vcmsCategoryCacheModel.name = getName();

		String name = vcmsCategoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			vcmsCategoryCacheModel.name = null;
		}

		vcmsCategoryCacheModel.description = getDescription();

		String description = vcmsCategoryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vcmsCategoryCacheModel.description = null;
		}

		vcmsCategoryCacheModel.anchored = getAnchored();

		vcmsCategoryCacheModel.href = getHref();

		String href = vcmsCategoryCacheModel.href;

		if ((href != null) && (href.length() == 0)) {
			vcmsCategoryCacheModel.href = null;
		}

		vcmsCategoryCacheModel.language = getLanguage();

		String language = vcmsCategoryCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			vcmsCategoryCacheModel.language = null;
		}

		vcmsCategoryCacheModel.hasImage = getHasImage();

		vcmsCategoryCacheModel.image = getImage();

		String image = vcmsCategoryCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			vcmsCategoryCacheModel.image = null;
		}

		vcmsCategoryCacheModel.position = getPosition();

		vcmsCategoryCacheModel.userHit = getUserHit();

		vcmsCategoryCacheModel.rssable = getRssable();

		return vcmsCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", portionId=");
		sb.append(getPortionId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", anchored=");
		sb.append(getAnchored());
		sb.append(", href=");
		sb.append(getHref());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", hasImage=");
		sb.append(getHasImage());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", rssable=");
		sb.append(getRssable());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VcmsCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portionId</column-name><column-value><![CDATA[");
		sb.append(getPortionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anchored</column-name><column-value><![CDATA[");
		sb.append(getAnchored());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>href</column-name><column-value><![CDATA[");
		sb.append(getHref());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasImage</column-name><column-value><![CDATA[");
		sb.append(getHasImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rssable</column-name><column-value><![CDATA[");
		sb.append(getRssable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VcmsCategory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VcmsCategory.class
		};
	private String _categoryId;
	private String _originalCategoryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private Date _createdDate;
	private String _createdByUser;
	private Date _modifiedDate;
	private String _modifiedByUser;
	private String _portionId;
	private String _originalPortionId;
	private String _parentId;
	private String _originalParentId;
	private String _name;
	private String _description;
	private boolean _anchored;
	private String _href;
	private String _language;
	private String _originalLanguage;
	private boolean _hasImage;
	private String _image;
	private int _position;
	private int _userHit;
	private boolean _rssable;
	private long _columnBitmask;
	private VcmsCategory _escapedModel;
}