/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VcmsCURelation;
import vn.gov.hoabinh.model.VcmsCURelationModel;
import vn.gov.hoabinh.service.persistence.VcmsCURelationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VcmsCURelation service. Represents a row in the &quot;VcmsCURelation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VcmsCURelationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VcmsCURelationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VcmsCURelationImpl
 * @see VcmsCURelation
 * @see VcmsCURelationModel
 * @generated
 */
@ProviderType
public class VcmsCURelationModelImpl extends BaseModelImpl<VcmsCURelation>
	implements VcmsCURelationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vcms c u relation model instance should use the {@link VcmsCURelation} interface instead.
	 */
	public static final String TABLE_NAME = "VcmsCURelation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryId", Types.VARCHAR },
			{ "userId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("categoryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table VcmsCURelation (categoryId VARCHAR(75) not null,userId VARCHAR(75) not null,primary key (categoryId, userId))";
	public static final String TABLE_SQL_DROP = "drop table VcmsCURelation";
	public static final String ORDER_BY_JPQL = " ORDER BY vcmsCURelation.id.categoryId DESC, vcmsCURelation.id.userId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VcmsCURelation.categoryId DESC, VcmsCURelation.userId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VcmsCURelation"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VcmsCURelation"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VcmsCURelation"),
			true);
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VcmsCURelation"));

	public VcmsCURelationModelImpl() {
	}

	@Override
	public VcmsCURelationPK getPrimaryKey() {
		return new VcmsCURelationPK(_categoryId, _userId);
	}

	@Override
	public void setPrimaryKey(VcmsCURelationPK primaryKey) {
		setCategoryId(primaryKey.categoryId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new VcmsCURelationPK(_categoryId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((VcmsCURelationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VcmsCURelation.class;
	}

	@Override
	public String getModelClassName() {
		return VcmsCURelation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryId", getCategoryId());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String categoryId = (String)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public String getCategoryId() {
		if (_categoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryId;
		}
	}

	@Override
	public void setCategoryId(String categoryId) {
		_columnBitmask = -1L;

		if (_originalCategoryId == null) {
			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public String getOriginalCategoryId() {
		return GetterUtil.getString(_originalCategoryId);
	}

	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_columnBitmask = -1L;

		if (_originalUserId == null) {
			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getOriginalUserId() {
		return GetterUtil.getString(_originalUserId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VcmsCURelation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VcmsCURelation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VcmsCURelationImpl vcmsCURelationImpl = new VcmsCURelationImpl();

		vcmsCURelationImpl.setCategoryId(getCategoryId());
		vcmsCURelationImpl.setUserId(getUserId());

		vcmsCURelationImpl.resetOriginalValues();

		return vcmsCURelationImpl;
	}

	@Override
	public int compareTo(VcmsCURelation vcmsCURelation) {
		int value = 0;

		value = getCategoryId().compareTo(vcmsCURelation.getCategoryId());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getUserId().compareTo(vcmsCURelation.getUserId());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VcmsCURelation)) {
			return false;
		}

		VcmsCURelation vcmsCURelation = (VcmsCURelation)obj;

		VcmsCURelationPK primaryKey = vcmsCURelation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VcmsCURelationModelImpl vcmsCURelationModelImpl = this;

		vcmsCURelationModelImpl._originalCategoryId = vcmsCURelationModelImpl._categoryId;

		vcmsCURelationModelImpl._originalUserId = vcmsCURelationModelImpl._userId;

		vcmsCURelationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VcmsCURelation> toCacheModel() {
		VcmsCURelationCacheModel vcmsCURelationCacheModel = new VcmsCURelationCacheModel();

		vcmsCURelationCacheModel.vcmsCURelationPK = getPrimaryKey();

		vcmsCURelationCacheModel.categoryId = getCategoryId();

		String categoryId = vcmsCURelationCacheModel.categoryId;

		if ((categoryId != null) && (categoryId.length() == 0)) {
			vcmsCURelationCacheModel.categoryId = null;
		}

		vcmsCURelationCacheModel.userId = getUserId();

		String userId = vcmsCURelationCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			vcmsCURelationCacheModel.userId = null;
		}

		return vcmsCURelationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VcmsCURelation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VcmsCURelation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VcmsCURelation.class
		};
	private String _categoryId;
	private String _originalCategoryId;
	private String _userId;
	private String _originalUserId;
	private long _columnBitmask;
	private VcmsCURelation _escapedModel;
}