/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.DataConvert;
import vn.gov.hoabinh.model.DataConvertModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DataConvert service. Represents a row in the &quot;DataConvert&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DataConvertModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataConvertImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataConvertImpl
 * @see DataConvert
 * @see DataConvertModel
 * @generated
 */
@ProviderType
public class DataConvertModelImpl extends BaseModelImpl<DataConvert>
	implements DataConvertModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data convert model instance should use the {@link DataConvert} interface instead.
	 */
	public static final String TABLE_NAME = "DataConvert";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "folderId", Types.BIGINT },
			{ "dataId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "fileName", Types.VARCHAR },
			{ "url", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DataConvert (id_ LONG not null primary key,folderId LONG,dataId VARCHAR(75) null,groupId LONG,fileEntryId LONG,createdDate DATE null,fileName VARCHAR(75) null,url VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DataConvert";
	public static final String ORDER_BY_JPQL = " ORDER BY dataConvert.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY DataConvert.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.DataConvert"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.DataConvert"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.DataConvert"));

	public DataConvertModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataConvert.class;
	}

	@Override
	public String getModelClassName() {
		return DataConvert.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("folderId", getFolderId());
		attributes.put("dataId", getDataId());
		attributes.put("groupId", getGroupId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("fileName", getFileName());
		attributes.put("url", getUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		String dataId = (String)attributes.get("dataId");

		if (dataId != null) {
			setDataId(dataId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@Override
	public String getDataId() {
		if (_dataId == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataId;
		}
	}

	@Override
	public void setDataId(String dataId) {
		_dataId = dataId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DataConvert.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataConvert toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataConvert)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataConvertImpl dataConvertImpl = new DataConvertImpl();

		dataConvertImpl.setId(getId());
		dataConvertImpl.setFolderId(getFolderId());
		dataConvertImpl.setDataId(getDataId());
		dataConvertImpl.setGroupId(getGroupId());
		dataConvertImpl.setFileEntryId(getFileEntryId());
		dataConvertImpl.setCreatedDate(getCreatedDate());
		dataConvertImpl.setFileName(getFileName());
		dataConvertImpl.setUrl(getUrl());

		dataConvertImpl.resetOriginalValues();

		return dataConvertImpl;
	}

	@Override
	public int compareTo(DataConvert dataConvert) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(),
				dataConvert.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataConvert)) {
			return false;
		}

		DataConvert dataConvert = (DataConvert)obj;

		long primaryKey = dataConvert.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DataConvert> toCacheModel() {
		DataConvertCacheModel dataConvertCacheModel = new DataConvertCacheModel();

		dataConvertCacheModel.id = getId();

		dataConvertCacheModel.folderId = getFolderId();

		dataConvertCacheModel.dataId = getDataId();

		String dataId = dataConvertCacheModel.dataId;

		if ((dataId != null) && (dataId.length() == 0)) {
			dataConvertCacheModel.dataId = null;
		}

		dataConvertCacheModel.groupId = getGroupId();

		dataConvertCacheModel.fileEntryId = getFileEntryId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			dataConvertCacheModel.createdDate = createdDate.getTime();
		}
		else {
			dataConvertCacheModel.createdDate = Long.MIN_VALUE;
		}

		dataConvertCacheModel.fileName = getFileName();

		String fileName = dataConvertCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			dataConvertCacheModel.fileName = null;
		}

		dataConvertCacheModel.url = getUrl();

		String url = dataConvertCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			dataConvertCacheModel.url = null;
		}

		return dataConvertCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", dataId=");
		sb.append(getDataId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.DataConvert");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataId</column-name><column-value><![CDATA[");
		sb.append(getDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DataConvert.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DataConvert.class
		};
	private long _id;
	private long _folderId;
	private String _dataId;
	private long _groupId;
	private long _fileEntryId;
	private Date _createdDate;
	private String _fileName;
	private String _url;
	private DataConvert _escapedModel;
}