/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.vdocDocument;
import vn.gov.hoabinh.model.vdocDocumentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the vdocDocument service. Represents a row in the &quot;vdocDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vdocDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link vdocDocumentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see vdocDocumentImpl
 * @see vdocDocument
 * @see vdocDocumentModel
 * @generated
 */
@ProviderType
public class vdocDocumentModelImpl extends BaseModelImpl<vdocDocument>
	implements vdocDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vdoc document model instance should use the {@link vdocDocument} interface instead.
	 */
	public static final String TABLE_NAME = "vdocDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "docId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "language", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdByUser", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedByUser", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "approvedByUser", Types.BIGINT },
			{ "approvedDate", Types.TIMESTAMP },
			{ "publishedByUser", Types.BIGINT },
			{ "publishedDate", Types.TIMESTAMP },
			{ "promulDate", Types.TIMESTAMP },
			{ "effectivedDate", Types.TIMESTAMP },
			{ "expiredDate", Types.TIMESTAMP },
			{ "replaceDoc", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "process", Types.VARCHAR },
			{ "base", Types.VARCHAR },
			{ "timeProcess", Types.VARCHAR },
			{ "cost", Types.VARCHAR },
			{ "requireDoc", Types.VARCHAR },
			{ "result", Types.VARCHAR },
			{ "objects", Types.VARCHAR },
			{ "style", Types.VARCHAR },
			{ "position", Types.INTEGER },
			{ "note", Types.VARCHAR },
			{ "executeOrg", Types.VARCHAR },
			{ "userHit", Types.INTEGER },
			{ "statusDoc", Types.INTEGER },
			{ "typeDoc", Types.INTEGER },
			{ "hasService", Types.BOOLEAN },
			{ "hasAttachment", Types.BOOLEAN },
			{ "fieldId", Types.VARCHAR },
			{ "orgRels", Types.VARCHAR },
			{ "fieldRels", Types.VARCHAR },
			{ "levels", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("docId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("promulDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("replaceDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("process", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("base", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timeProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cost", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requireDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("result", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("objects", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("style", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("executeOrg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusDoc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("typeDoc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hasService", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasAttachment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fieldId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("levels", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vdocDocument (docId VARCHAR(75) not null primary key,groupId LONG,language VARCHAR(75) null,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,publishedByUser LONG,publishedDate DATE null,promulDate DATE null,effectivedDate DATE null,expiredDate DATE null,replaceDoc VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(75) null,process VARCHAR(75) null,base VARCHAR(75) null,timeProcess VARCHAR(75) null,cost VARCHAR(75) null,requireDoc VARCHAR(75) null,result VARCHAR(75) null,objects VARCHAR(75) null,style VARCHAR(75) null,position INTEGER,note VARCHAR(75) null,executeOrg VARCHAR(75) null,userHit INTEGER,statusDoc INTEGER,typeDoc INTEGER,hasService BOOLEAN,hasAttachment BOOLEAN,fieldId VARCHAR(75) null,orgRels VARCHAR(75) null,fieldRels VARCHAR(75) null,levels VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vdocDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY vdocDocument.position DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vdocDocument.position DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.vdocDocument"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.vdocDocument"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.vdocDocument"),
			true);
	public static final long FIELDID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long HASSERVICE_COLUMN_BITMASK = 4L;
	public static final long LANGUAGE_COLUMN_BITMASK = 8L;
	public static final long POSITION_COLUMN_BITMASK = 16L;
	public static final long STATUSDOC_COLUMN_BITMASK = 32L;
	public static final long TYPEDOC_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.vdocDocument"));

	public vdocDocumentModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _docId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDocId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _docId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return vdocDocument.class;
	}

	@Override
	public String getModelClassName() {
		return vdocDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("docId", getDocId());
		attributes.put("groupId", getGroupId());
		attributes.put("language", getLanguage());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedByUser", getModifiedByUser());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("approvedByUser", getApprovedByUser());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("publishedByUser", getPublishedByUser());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("promulDate", getPromulDate());
		attributes.put("effectivedDate", getEffectivedDate());
		attributes.put("expiredDate", getExpiredDate());
		attributes.put("replaceDoc", getReplaceDoc());
		attributes.put("title", getTitle());
		attributes.put("content", getContent());
		attributes.put("process", getProcess());
		attributes.put("base", getBase());
		attributes.put("timeProcess", getTimeProcess());
		attributes.put("cost", getCost());
		attributes.put("requireDoc", getRequireDoc());
		attributes.put("result", getResult());
		attributes.put("objects", getObjects());
		attributes.put("style", getStyle());
		attributes.put("position", getPosition());
		attributes.put("note", getNote());
		attributes.put("executeOrg", getExecuteOrg());
		attributes.put("userHit", getUserHit());
		attributes.put("statusDoc", getStatusDoc());
		attributes.put("typeDoc", getTypeDoc());
		attributes.put("hasService", getHasService());
		attributes.put("hasAttachment", getHasAttachment());
		attributes.put("fieldId", getFieldId());
		attributes.put("orgRels", getOrgRels());
		attributes.put("fieldRels", getFieldRels());
		attributes.put("levels", getLevels());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String docId = (String)attributes.get("docId");

		if (docId != null) {
			setDocId(docId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long createdByUser = (Long)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long modifiedByUser = (Long)attributes.get("modifiedByUser");

		if (modifiedByUser != null) {
			setModifiedByUser(modifiedByUser);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long approvedByUser = (Long)attributes.get("approvedByUser");

		if (approvedByUser != null) {
			setApprovedByUser(approvedByUser);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		Long publishedByUser = (Long)attributes.get("publishedByUser");

		if (publishedByUser != null) {
			setPublishedByUser(publishedByUser);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		Date promulDate = (Date)attributes.get("promulDate");

		if (promulDate != null) {
			setPromulDate(promulDate);
		}

		Date effectivedDate = (Date)attributes.get("effectivedDate");

		if (effectivedDate != null) {
			setEffectivedDate(effectivedDate);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}

		String replaceDoc = (String)attributes.get("replaceDoc");

		if (replaceDoc != null) {
			setReplaceDoc(replaceDoc);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String process = (String)attributes.get("process");

		if (process != null) {
			setProcess(process);
		}

		String base = (String)attributes.get("base");

		if (base != null) {
			setBase(base);
		}

		String timeProcess = (String)attributes.get("timeProcess");

		if (timeProcess != null) {
			setTimeProcess(timeProcess);
		}

		String cost = (String)attributes.get("cost");

		if (cost != null) {
			setCost(cost);
		}

		String requireDoc = (String)attributes.get("requireDoc");

		if (requireDoc != null) {
			setRequireDoc(requireDoc);
		}

		String result = (String)attributes.get("result");

		if (result != null) {
			setResult(result);
		}

		String objects = (String)attributes.get("objects");

		if (objects != null) {
			setObjects(objects);
		}

		String style = (String)attributes.get("style");

		if (style != null) {
			setStyle(style);
		}

		Integer position = (Integer)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String executeOrg = (String)attributes.get("executeOrg");

		if (executeOrg != null) {
			setExecuteOrg(executeOrg);
		}

		Integer userHit = (Integer)attributes.get("userHit");

		if (userHit != null) {
			setUserHit(userHit);
		}

		Integer statusDoc = (Integer)attributes.get("statusDoc");

		if (statusDoc != null) {
			setStatusDoc(statusDoc);
		}

		Integer typeDoc = (Integer)attributes.get("typeDoc");

		if (typeDoc != null) {
			setTypeDoc(typeDoc);
		}

		Boolean hasService = (Boolean)attributes.get("hasService");

		if (hasService != null) {
			setHasService(hasService);
		}

		Boolean hasAttachment = (Boolean)attributes.get("hasAttachment");

		if (hasAttachment != null) {
			setHasAttachment(hasAttachment);
		}

		String fieldId = (String)attributes.get("fieldId");

		if (fieldId != null) {
			setFieldId(fieldId);
		}

		String orgRels = (String)attributes.get("orgRels");

		if (orgRels != null) {
			setOrgRels(orgRels);
		}

		String fieldRels = (String)attributes.get("fieldRels");

		if (fieldRels != null) {
			setFieldRels(fieldRels);
		}

		String levels = (String)attributes.get("levels");

		if (levels != null) {
			setLevels(levels);
		}
	}

	@Override
	public String getDocId() {
		if (_docId == null) {
			return StringPool.BLANK;
		}
		else {
			return _docId;
		}
	}

	@Override
	public void setDocId(String docId) {
		_docId = docId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@Override
	public long getPublishedByUser() {
		return _publishedByUser;
	}

	@Override
	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@Override
	public Date getPromulDate() {
		return _promulDate;
	}

	@Override
	public void setPromulDate(Date promulDate) {
		_promulDate = promulDate;
	}

	@Override
	public Date getEffectivedDate() {
		return _effectivedDate;
	}

	@Override
	public void setEffectivedDate(Date effectivedDate) {
		_effectivedDate = effectivedDate;
	}

	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@Override
	public String getReplaceDoc() {
		if (_replaceDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _replaceDoc;
		}
	}

	@Override
	public void setReplaceDoc(String replaceDoc) {
		_replaceDoc = replaceDoc;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public String getProcess() {
		if (_process == null) {
			return StringPool.BLANK;
		}
		else {
			return _process;
		}
	}

	@Override
	public void setProcess(String process) {
		_process = process;
	}

	@Override
	public String getBase() {
		if (_base == null) {
			return StringPool.BLANK;
		}
		else {
			return _base;
		}
	}

	@Override
	public void setBase(String base) {
		_base = base;
	}

	@Override
	public String getTimeProcess() {
		if (_timeProcess == null) {
			return StringPool.BLANK;
		}
		else {
			return _timeProcess;
		}
	}

	@Override
	public void setTimeProcess(String timeProcess) {
		_timeProcess = timeProcess;
	}

	@Override
	public String getCost() {
		if (_cost == null) {
			return StringPool.BLANK;
		}
		else {
			return _cost;
		}
	}

	@Override
	public void setCost(String cost) {
		_cost = cost;
	}

	@Override
	public String getRequireDoc() {
		if (_requireDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _requireDoc;
		}
	}

	@Override
	public void setRequireDoc(String requireDoc) {
		_requireDoc = requireDoc;
	}

	@Override
	public String getResult() {
		if (_result == null) {
			return StringPool.BLANK;
		}
		else {
			return _result;
		}
	}

	@Override
	public void setResult(String result) {
		_result = result;
	}

	@Override
	public String getObjects() {
		if (_objects == null) {
			return StringPool.BLANK;
		}
		else {
			return _objects;
		}
	}

	@Override
	public void setObjects(String objects) {
		_objects = objects;
	}

	@Override
	public String getStyle() {
		if (_style == null) {
			return StringPool.BLANK;
		}
		else {
			return _style;
		}
	}

	@Override
	public void setStyle(String style) {
		_style = style;
	}

	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_columnBitmask = -1L;

		if (!_setOriginalPosition) {
			_setOriginalPosition = true;

			_originalPosition = _position;
		}

		_position = position;
	}

	public int getOriginalPosition() {
		return _originalPosition;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public String getExecuteOrg() {
		if (_executeOrg == null) {
			return StringPool.BLANK;
		}
		else {
			return _executeOrg;
		}
	}

	@Override
	public void setExecuteOrg(String executeOrg) {
		_executeOrg = executeOrg;
	}

	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@Override
	public int getStatusDoc() {
		return _statusDoc;
	}

	@Override
	public void setStatusDoc(int statusDoc) {
		_columnBitmask |= STATUSDOC_COLUMN_BITMASK;

		if (!_setOriginalStatusDoc) {
			_setOriginalStatusDoc = true;

			_originalStatusDoc = _statusDoc;
		}

		_statusDoc = statusDoc;
	}

	public int getOriginalStatusDoc() {
		return _originalStatusDoc;
	}

	@Override
	public int getTypeDoc() {
		return _typeDoc;
	}

	@Override
	public void setTypeDoc(int typeDoc) {
		_columnBitmask |= TYPEDOC_COLUMN_BITMASK;

		if (!_setOriginalTypeDoc) {
			_setOriginalTypeDoc = true;

			_originalTypeDoc = _typeDoc;
		}

		_typeDoc = typeDoc;
	}

	public int getOriginalTypeDoc() {
		return _originalTypeDoc;
	}

	@Override
	public boolean getHasService() {
		return _hasService;
	}

	@Override
	public boolean isHasService() {
		return _hasService;
	}

	@Override
	public void setHasService(boolean hasService) {
		_columnBitmask |= HASSERVICE_COLUMN_BITMASK;

		if (!_setOriginalHasService) {
			_setOriginalHasService = true;

			_originalHasService = _hasService;
		}

		_hasService = hasService;
	}

	public boolean getOriginalHasService() {
		return _originalHasService;
	}

	@Override
	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	@Override
	public String getFieldId() {
		if (_fieldId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldId;
		}
	}

	@Override
	public void setFieldId(String fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (_originalFieldId == null) {
			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public String getOriginalFieldId() {
		return GetterUtil.getString(_originalFieldId);
	}

	@Override
	public String getOrgRels() {
		if (_orgRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgRels;
		}
	}

	@Override
	public void setOrgRels(String orgRels) {
		_orgRels = orgRels;
	}

	@Override
	public String getFieldRels() {
		if (_fieldRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldRels;
		}
	}

	@Override
	public void setFieldRels(String fieldRels) {
		_fieldRels = fieldRels;
	}

	@Override
	public String getLevels() {
		if (_levels == null) {
			return StringPool.BLANK;
		}
		else {
			return _levels;
		}
	}

	@Override
	public void setLevels(String levels) {
		_levels = levels;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public vdocDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (vdocDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		vdocDocumentImpl vdocDocumentImpl = new vdocDocumentImpl();

		vdocDocumentImpl.setDocId(getDocId());
		vdocDocumentImpl.setGroupId(getGroupId());
		vdocDocumentImpl.setLanguage(getLanguage());
		vdocDocumentImpl.setCompanyId(getCompanyId());
		vdocDocumentImpl.setUserId(getUserId());
		vdocDocumentImpl.setCreatedByUser(getCreatedByUser());
		vdocDocumentImpl.setCreatedDate(getCreatedDate());
		vdocDocumentImpl.setModifiedByUser(getModifiedByUser());
		vdocDocumentImpl.setModifiedDate(getModifiedDate());
		vdocDocumentImpl.setApprovedByUser(getApprovedByUser());
		vdocDocumentImpl.setApprovedDate(getApprovedDate());
		vdocDocumentImpl.setPublishedByUser(getPublishedByUser());
		vdocDocumentImpl.setPublishedDate(getPublishedDate());
		vdocDocumentImpl.setPromulDate(getPromulDate());
		vdocDocumentImpl.setEffectivedDate(getEffectivedDate());
		vdocDocumentImpl.setExpiredDate(getExpiredDate());
		vdocDocumentImpl.setReplaceDoc(getReplaceDoc());
		vdocDocumentImpl.setTitle(getTitle());
		vdocDocumentImpl.setContent(getContent());
		vdocDocumentImpl.setProcess(getProcess());
		vdocDocumentImpl.setBase(getBase());
		vdocDocumentImpl.setTimeProcess(getTimeProcess());
		vdocDocumentImpl.setCost(getCost());
		vdocDocumentImpl.setRequireDoc(getRequireDoc());
		vdocDocumentImpl.setResult(getResult());
		vdocDocumentImpl.setObjects(getObjects());
		vdocDocumentImpl.setStyle(getStyle());
		vdocDocumentImpl.setPosition(getPosition());
		vdocDocumentImpl.setNote(getNote());
		vdocDocumentImpl.setExecuteOrg(getExecuteOrg());
		vdocDocumentImpl.setUserHit(getUserHit());
		vdocDocumentImpl.setStatusDoc(getStatusDoc());
		vdocDocumentImpl.setTypeDoc(getTypeDoc());
		vdocDocumentImpl.setHasService(getHasService());
		vdocDocumentImpl.setHasAttachment(getHasAttachment());
		vdocDocumentImpl.setFieldId(getFieldId());
		vdocDocumentImpl.setOrgRels(getOrgRels());
		vdocDocumentImpl.setFieldRels(getFieldRels());
		vdocDocumentImpl.setLevels(getLevels());

		vdocDocumentImpl.resetOriginalValues();

		return vdocDocumentImpl;
	}

	@Override
	public int compareTo(vdocDocument vdocDocument) {
		int value = 0;

		if (getPosition() < vdocDocument.getPosition()) {
			value = -1;
		}
		else if (getPosition() > vdocDocument.getPosition()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof vdocDocument)) {
			return false;
		}

		vdocDocument vdocDocument = (vdocDocument)obj;

		String primaryKey = vdocDocument.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		vdocDocumentModelImpl vdocDocumentModelImpl = this;

		vdocDocumentModelImpl._originalGroupId = vdocDocumentModelImpl._groupId;

		vdocDocumentModelImpl._setOriginalGroupId = false;

		vdocDocumentModelImpl._originalLanguage = vdocDocumentModelImpl._language;

		vdocDocumentModelImpl._originalPosition = vdocDocumentModelImpl._position;

		vdocDocumentModelImpl._setOriginalPosition = false;

		vdocDocumentModelImpl._originalStatusDoc = vdocDocumentModelImpl._statusDoc;

		vdocDocumentModelImpl._setOriginalStatusDoc = false;

		vdocDocumentModelImpl._originalTypeDoc = vdocDocumentModelImpl._typeDoc;

		vdocDocumentModelImpl._setOriginalTypeDoc = false;

		vdocDocumentModelImpl._originalHasService = vdocDocumentModelImpl._hasService;

		vdocDocumentModelImpl._setOriginalHasService = false;

		vdocDocumentModelImpl._originalFieldId = vdocDocumentModelImpl._fieldId;

		vdocDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<vdocDocument> toCacheModel() {
		vdocDocumentCacheModel vdocDocumentCacheModel = new vdocDocumentCacheModel();

		vdocDocumentCacheModel.docId = getDocId();

		String docId = vdocDocumentCacheModel.docId;

		if ((docId != null) && (docId.length() == 0)) {
			vdocDocumentCacheModel.docId = null;
		}

		vdocDocumentCacheModel.groupId = getGroupId();

		vdocDocumentCacheModel.language = getLanguage();

		String language = vdocDocumentCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			vdocDocumentCacheModel.language = null;
		}

		vdocDocumentCacheModel.companyId = getCompanyId();

		vdocDocumentCacheModel.userId = getUserId();

		vdocDocumentCacheModel.createdByUser = getCreatedByUser();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vdocDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vdocDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		vdocDocumentCacheModel.modifiedByUser = getModifiedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vdocDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vdocDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vdocDocumentCacheModel.approvedByUser = getApprovedByUser();

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			vdocDocumentCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			vdocDocumentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		vdocDocumentCacheModel.publishedByUser = getPublishedByUser();

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			vdocDocumentCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			vdocDocumentCacheModel.publishedDate = Long.MIN_VALUE;
		}

		Date promulDate = getPromulDate();

		if (promulDate != null) {
			vdocDocumentCacheModel.promulDate = promulDate.getTime();
		}
		else {
			vdocDocumentCacheModel.promulDate = Long.MIN_VALUE;
		}

		Date effectivedDate = getEffectivedDate();

		if (effectivedDate != null) {
			vdocDocumentCacheModel.effectivedDate = effectivedDate.getTime();
		}
		else {
			vdocDocumentCacheModel.effectivedDate = Long.MIN_VALUE;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			vdocDocumentCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			vdocDocumentCacheModel.expiredDate = Long.MIN_VALUE;
		}

		vdocDocumentCacheModel.replaceDoc = getReplaceDoc();

		String replaceDoc = vdocDocumentCacheModel.replaceDoc;

		if ((replaceDoc != null) && (replaceDoc.length() == 0)) {
			vdocDocumentCacheModel.replaceDoc = null;
		}

		vdocDocumentCacheModel.title = getTitle();

		String title = vdocDocumentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			vdocDocumentCacheModel.title = null;
		}

		vdocDocumentCacheModel.content = getContent();

		String content = vdocDocumentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			vdocDocumentCacheModel.content = null;
		}

		vdocDocumentCacheModel.process = getProcess();

		String process = vdocDocumentCacheModel.process;

		if ((process != null) && (process.length() == 0)) {
			vdocDocumentCacheModel.process = null;
		}

		vdocDocumentCacheModel.base = getBase();

		String base = vdocDocumentCacheModel.base;

		if ((base != null) && (base.length() == 0)) {
			vdocDocumentCacheModel.base = null;
		}

		vdocDocumentCacheModel.timeProcess = getTimeProcess();

		String timeProcess = vdocDocumentCacheModel.timeProcess;

		if ((timeProcess != null) && (timeProcess.length() == 0)) {
			vdocDocumentCacheModel.timeProcess = null;
		}

		vdocDocumentCacheModel.cost = getCost();

		String cost = vdocDocumentCacheModel.cost;

		if ((cost != null) && (cost.length() == 0)) {
			vdocDocumentCacheModel.cost = null;
		}

		vdocDocumentCacheModel.requireDoc = getRequireDoc();

		String requireDoc = vdocDocumentCacheModel.requireDoc;

		if ((requireDoc != null) && (requireDoc.length() == 0)) {
			vdocDocumentCacheModel.requireDoc = null;
		}

		vdocDocumentCacheModel.result = getResult();

		String result = vdocDocumentCacheModel.result;

		if ((result != null) && (result.length() == 0)) {
			vdocDocumentCacheModel.result = null;
		}

		vdocDocumentCacheModel.objects = getObjects();

		String objects = vdocDocumentCacheModel.objects;

		if ((objects != null) && (objects.length() == 0)) {
			vdocDocumentCacheModel.objects = null;
		}

		vdocDocumentCacheModel.style = getStyle();

		String style = vdocDocumentCacheModel.style;

		if ((style != null) && (style.length() == 0)) {
			vdocDocumentCacheModel.style = null;
		}

		vdocDocumentCacheModel.position = getPosition();

		vdocDocumentCacheModel.note = getNote();

		String note = vdocDocumentCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			vdocDocumentCacheModel.note = null;
		}

		vdocDocumentCacheModel.executeOrg = getExecuteOrg();

		String executeOrg = vdocDocumentCacheModel.executeOrg;

		if ((executeOrg != null) && (executeOrg.length() == 0)) {
			vdocDocumentCacheModel.executeOrg = null;
		}

		vdocDocumentCacheModel.userHit = getUserHit();

		vdocDocumentCacheModel.statusDoc = getStatusDoc();

		vdocDocumentCacheModel.typeDoc = getTypeDoc();

		vdocDocumentCacheModel.hasService = getHasService();

		vdocDocumentCacheModel.hasAttachment = getHasAttachment();

		vdocDocumentCacheModel.fieldId = getFieldId();

		String fieldId = vdocDocumentCacheModel.fieldId;

		if ((fieldId != null) && (fieldId.length() == 0)) {
			vdocDocumentCacheModel.fieldId = null;
		}

		vdocDocumentCacheModel.orgRels = getOrgRels();

		String orgRels = vdocDocumentCacheModel.orgRels;

		if ((orgRels != null) && (orgRels.length() == 0)) {
			vdocDocumentCacheModel.orgRels = null;
		}

		vdocDocumentCacheModel.fieldRels = getFieldRels();

		String fieldRels = vdocDocumentCacheModel.fieldRels;

		if ((fieldRels != null) && (fieldRels.length() == 0)) {
			vdocDocumentCacheModel.fieldRels = null;
		}

		vdocDocumentCacheModel.levels = getLevels();

		String levels = vdocDocumentCacheModel.levels;

		if ((levels != null) && (levels.length() == 0)) {
			vdocDocumentCacheModel.levels = null;
		}

		return vdocDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(79);

		sb.append("{docId=");
		sb.append(getDocId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", approvedByUser=");
		sb.append(getApprovedByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", promulDate=");
		sb.append(getPromulDate());
		sb.append(", effectivedDate=");
		sb.append(getEffectivedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", replaceDoc=");
		sb.append(getReplaceDoc());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", process=");
		sb.append(getProcess());
		sb.append(", base=");
		sb.append(getBase());
		sb.append(", timeProcess=");
		sb.append(getTimeProcess());
		sb.append(", cost=");
		sb.append(getCost());
		sb.append(", requireDoc=");
		sb.append(getRequireDoc());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", objects=");
		sb.append(getObjects());
		sb.append(", style=");
		sb.append(getStyle());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", executeOrg=");
		sb.append(getExecuteOrg());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", statusDoc=");
		sb.append(getStatusDoc());
		sb.append(", typeDoc=");
		sb.append(getTypeDoc());
		sb.append(", hasService=");
		sb.append(getHasService());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", fieldId=");
		sb.append(getFieldId());
		sb.append(", orgRels=");
		sb.append(getOrgRels());
		sb.append(", fieldRels=");
		sb.append(getFieldRels());
		sb.append(", levels=");
		sb.append(getLevels());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(121);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.vdocDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>docId</column-name><column-value><![CDATA[");
		sb.append(getDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedByUser</column-name><column-value><![CDATA[");
		sb.append(getApprovedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>promulDate</column-name><column-value><![CDATA[");
		sb.append(getPromulDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectivedDate</column-name><column-value><![CDATA[");
		sb.append(getEffectivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replaceDoc</column-name><column-value><![CDATA[");
		sb.append(getReplaceDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>process</column-name><column-value><![CDATA[");
		sb.append(getProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>base</column-name><column-value><![CDATA[");
		sb.append(getBase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeProcess</column-name><column-value><![CDATA[");
		sb.append(getTimeProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cost</column-name><column-value><![CDATA[");
		sb.append(getCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requireDoc</column-name><column-value><![CDATA[");
		sb.append(getRequireDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objects</column-name><column-value><![CDATA[");
		sb.append(getObjects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>style</column-name><column-value><![CDATA[");
		sb.append(getStyle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeOrg</column-name><column-value><![CDATA[");
		sb.append(getExecuteOrg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDoc</column-name><column-value><![CDATA[");
		sb.append(getStatusDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeDoc</column-name><column-value><![CDATA[");
		sb.append(getTypeDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasService</column-name><column-value><![CDATA[");
		sb.append(getHasService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgRels</column-name><column-value><![CDATA[");
		sb.append(getOrgRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldRels</column-name><column-value><![CDATA[");
		sb.append(getFieldRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levels</column-name><column-value><![CDATA[");
		sb.append(getLevels());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = vdocDocument.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			vdocDocument.class
		};
	private String _docId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _language;
	private String _originalLanguage;
	private long _companyId;
	private long _userId;
	private long _createdByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private Date _promulDate;
	private Date _effectivedDate;
	private Date _expiredDate;
	private String _replaceDoc;
	private String _title;
	private String _content;
	private String _process;
	private String _base;
	private String _timeProcess;
	private String _cost;
	private String _requireDoc;
	private String _result;
	private String _objects;
	private String _style;
	private int _position;
	private int _originalPosition;
	private boolean _setOriginalPosition;
	private String _note;
	private String _executeOrg;
	private int _userHit;
	private int _statusDoc;
	private int _originalStatusDoc;
	private boolean _setOriginalStatusDoc;
	private int _typeDoc;
	private int _originalTypeDoc;
	private boolean _setOriginalTypeDoc;
	private boolean _hasService;
	private boolean _originalHasService;
	private boolean _setOriginalHasService;
	private boolean _hasAttachment;
	private String _fieldId;
	private String _originalFieldId;
	private String _orgRels;
	private String _fieldRels;
	private String _levels;
	private long _columnBitmask;
	private vdocDocument _escapedModel;
}