/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import vn.gov.hoabinh.model.VisitorTracker;
import vn.gov.hoabinh.model.VisitorTrackerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VisitorTracker service. Represents a row in the &quot;VisitorTracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VisitorTrackerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VisitorTrackerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VisitorTrackerImpl
 * @see VisitorTracker
 * @see VisitorTrackerModel
 * @generated
 */
@ProviderType
public class VisitorTrackerModelImpl extends BaseModelImpl<VisitorTracker>
	implements VisitorTrackerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a visitor tracker model instance should use the {@link VisitorTracker} interface instead.
	 */
	public static final String TABLE_NAME = "VisitorTracker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "visitorId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "expiredDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("visitorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table VisitorTracker (visitorId LONG not null primary key,companyId LONG,groupId LONG,createdDate DATE null,expiredDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table VisitorTracker";
	public static final String ORDER_BY_JPQL = " ORDER BY visitorTracker.visitorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VisitorTracker.visitorId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VisitorTracker"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VisitorTracker"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VisitorTracker"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long VISITORID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VisitorTracker"));

	public VisitorTrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _visitorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVisitorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _visitorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VisitorTracker.class;
	}

	@Override
	public String getModelClassName() {
		return VisitorTracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("visitorId", getVisitorId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("expiredDate", getExpiredDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long visitorId = (Long)attributes.get("visitorId");

		if (visitorId != null) {
			setVisitorId(visitorId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}
	}

	@Override
	public long getVisitorId() {
		return _visitorId;
	}

	@Override
	public void setVisitorId(long visitorId) {
		_visitorId = visitorId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VisitorTracker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VisitorTracker toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VisitorTracker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VisitorTrackerImpl visitorTrackerImpl = new VisitorTrackerImpl();

		visitorTrackerImpl.setVisitorId(getVisitorId());
		visitorTrackerImpl.setCompanyId(getCompanyId());
		visitorTrackerImpl.setGroupId(getGroupId());
		visitorTrackerImpl.setCreatedDate(getCreatedDate());
		visitorTrackerImpl.setExpiredDate(getExpiredDate());

		visitorTrackerImpl.resetOriginalValues();

		return visitorTrackerImpl;
	}

	@Override
	public int compareTo(VisitorTracker visitorTracker) {
		long primaryKey = visitorTracker.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VisitorTracker)) {
			return false;
		}

		VisitorTracker visitorTracker = (VisitorTracker)obj;

		long primaryKey = visitorTracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VisitorTrackerModelImpl visitorTrackerModelImpl = this;

		visitorTrackerModelImpl._originalCompanyId = visitorTrackerModelImpl._companyId;

		visitorTrackerModelImpl._setOriginalCompanyId = false;

		visitorTrackerModelImpl._originalGroupId = visitorTrackerModelImpl._groupId;

		visitorTrackerModelImpl._setOriginalGroupId = false;

		visitorTrackerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VisitorTracker> toCacheModel() {
		VisitorTrackerCacheModel visitorTrackerCacheModel = new VisitorTrackerCacheModel();

		visitorTrackerCacheModel.visitorId = getVisitorId();

		visitorTrackerCacheModel.companyId = getCompanyId();

		visitorTrackerCacheModel.groupId = getGroupId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			visitorTrackerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			visitorTrackerCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			visitorTrackerCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			visitorTrackerCacheModel.expiredDate = Long.MIN_VALUE;
		}

		return visitorTrackerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{visitorId=");
		sb.append(getVisitorId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VisitorTracker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>visitorId</column-name><column-value><![CDATA[");
		sb.append(getVisitorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VisitorTracker.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VisitorTracker.class
		};
	private long _visitorId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createdDate;
	private Date _expiredDate;
	private long _columnBitmask;
	private VisitorTracker _escapedModel;
}