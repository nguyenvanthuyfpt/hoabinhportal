/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VLegalDocument;
import vn.gov.hoabinh.model.VLegalDocumentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VLegalDocument service. Represents a row in the &quot;VLegalDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VLegalDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VLegalDocumentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VLegalDocumentImpl
 * @see VLegalDocument
 * @see VLegalDocumentModel
 * @generated
 */
@ProviderType
public class VLegalDocumentModelImpl extends BaseModelImpl<VLegalDocument>
	implements VLegalDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a v legal document model instance should use the {@link VLegalDocument} interface instead.
	 */
	public static final String TABLE_NAME = "VLegalDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "docId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdByUser", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedByUser", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "approvedByUser", Types.BIGINT },
			{ "approvedDate", Types.TIMESTAMP },
			{ "forwardedByUser", Types.BIGINT },
			{ "forwardedDate", Types.TIMESTAMP },
			{ "publishedByUser", Types.BIGINT },
			{ "publishedDate", Types.TIMESTAMP },
			{ "symbol", Types.VARCHAR },
			{ "num", Types.VARCHAR },
			{ "promulDate", Types.TIMESTAMP },
			{ "effectivedDate", Types.TIMESTAMP },
			{ "expiredDate", Types.TIMESTAMP },
			{ "replaceDoc", Types.VARCHAR },
			{ "summary", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "userHit", Types.INTEGER },
			{ "statusDoc", Types.INTEGER },
			{ "hasAttachment", Types.BOOLEAN },
			{ "typeDocId", Types.VARCHAR },
			{ "fieldId", Types.VARCHAR },
			{ "orgId", Types.VARCHAR },
			{ "orgRels", Types.VARCHAR },
			{ "signerRels", Types.VARCHAR },
			{ "fieldRels", Types.VARCHAR },
			{ "numRels", Types.VARCHAR },
			{ "docCode", Types.VARCHAR },
			{ "departmentRels", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("docId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("forwardedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("forwardedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("symbol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("num", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("promulDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("replaceDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusDoc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hasAttachment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("typeDocId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signerRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numRels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentRels", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table VLegalDocument (docId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,forwardedByUser LONG,forwardedDate DATE null,publishedByUser LONG,publishedDate DATE null,symbol VARCHAR(75) null,num VARCHAR(75) null,promulDate DATE null,effectivedDate DATE null,expiredDate DATE null,replaceDoc VARCHAR(75) null,summary VARCHAR(75) null,content VARCHAR(75) null,language VARCHAR(75) null,userHit INTEGER,statusDoc INTEGER,hasAttachment BOOLEAN,typeDocId VARCHAR(75) null,fieldId VARCHAR(75) null,orgId VARCHAR(75) null,orgRels VARCHAR(75) null,signerRels VARCHAR(75) null,fieldRels VARCHAR(75) null,numRels VARCHAR(75) null,docCode VARCHAR(75) null,departmentRels VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table VLegalDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY vLegalDocument.promulDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VLegalDocument.promulDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VLegalDocument"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VLegalDocument"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VLegalDocument"),
			true);
	public static final long CREATEDBYUSER_COLUMN_BITMASK = 1L;
	public static final long DOCID_COLUMN_BITMASK = 2L;
	public static final long FIELDID_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long LANGUAGE_COLUMN_BITMASK = 16L;
	public static final long NUM_COLUMN_BITMASK = 32L;
	public static final long ORGID_COLUMN_BITMASK = 64L;
	public static final long STATUSDOC_COLUMN_BITMASK = 128L;
	public static final long SYMBOL_COLUMN_BITMASK = 256L;
	public static final long TYPEDOCID_COLUMN_BITMASK = 512L;
	public static final long USERID_COLUMN_BITMASK = 1024L;
	public static final long PROMULDATE_COLUMN_BITMASK = 2048L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VLegalDocument"));

	public VLegalDocumentModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _docId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDocId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _docId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VLegalDocument.class;
	}

	@Override
	public String getModelClassName() {
		return VLegalDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("docId", getDocId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedByUser", getModifiedByUser());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("approvedByUser", getApprovedByUser());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("forwardedByUser", getForwardedByUser());
		attributes.put("forwardedDate", getForwardedDate());
		attributes.put("publishedByUser", getPublishedByUser());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("symbol", getSymbol());
		attributes.put("num", getNum());
		attributes.put("promulDate", getPromulDate());
		attributes.put("effectivedDate", getEffectivedDate());
		attributes.put("expiredDate", getExpiredDate());
		attributes.put("replaceDoc", getReplaceDoc());
		attributes.put("summary", getSummary());
		attributes.put("content", getContent());
		attributes.put("language", getLanguage());
		attributes.put("userHit", getUserHit());
		attributes.put("statusDoc", getStatusDoc());
		attributes.put("hasAttachment", getHasAttachment());
		attributes.put("typeDocId", getTypeDocId());
		attributes.put("fieldId", getFieldId());
		attributes.put("orgId", getOrgId());
		attributes.put("orgRels", getOrgRels());
		attributes.put("signerRels", getSignerRels());
		attributes.put("fieldRels", getFieldRels());
		attributes.put("numRels", getNumRels());
		attributes.put("docCode", getDocCode());
		attributes.put("departmentRels", getDepartmentRels());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String docId = (String)attributes.get("docId");

		if (docId != null) {
			setDocId(docId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long createdByUser = (Long)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long modifiedByUser = (Long)attributes.get("modifiedByUser");

		if (modifiedByUser != null) {
			setModifiedByUser(modifiedByUser);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long approvedByUser = (Long)attributes.get("approvedByUser");

		if (approvedByUser != null) {
			setApprovedByUser(approvedByUser);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		Long forwardedByUser = (Long)attributes.get("forwardedByUser");

		if (forwardedByUser != null) {
			setForwardedByUser(forwardedByUser);
		}

		Date forwardedDate = (Date)attributes.get("forwardedDate");

		if (forwardedDate != null) {
			setForwardedDate(forwardedDate);
		}

		Long publishedByUser = (Long)attributes.get("publishedByUser");

		if (publishedByUser != null) {
			setPublishedByUser(publishedByUser);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		String symbol = (String)attributes.get("symbol");

		if (symbol != null) {
			setSymbol(symbol);
		}

		String num = (String)attributes.get("num");

		if (num != null) {
			setNum(num);
		}

		Date promulDate = (Date)attributes.get("promulDate");

		if (promulDate != null) {
			setPromulDate(promulDate);
		}

		Date effectivedDate = (Date)attributes.get("effectivedDate");

		if (effectivedDate != null) {
			setEffectivedDate(effectivedDate);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}

		String replaceDoc = (String)attributes.get("replaceDoc");

		if (replaceDoc != null) {
			setReplaceDoc(replaceDoc);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Integer userHit = (Integer)attributes.get("userHit");

		if (userHit != null) {
			setUserHit(userHit);
		}

		Integer statusDoc = (Integer)attributes.get("statusDoc");

		if (statusDoc != null) {
			setStatusDoc(statusDoc);
		}

		Boolean hasAttachment = (Boolean)attributes.get("hasAttachment");

		if (hasAttachment != null) {
			setHasAttachment(hasAttachment);
		}

		String typeDocId = (String)attributes.get("typeDocId");

		if (typeDocId != null) {
			setTypeDocId(typeDocId);
		}

		String fieldId = (String)attributes.get("fieldId");

		if (fieldId != null) {
			setFieldId(fieldId);
		}

		String orgId = (String)attributes.get("orgId");

		if (orgId != null) {
			setOrgId(orgId);
		}

		String orgRels = (String)attributes.get("orgRels");

		if (orgRels != null) {
			setOrgRels(orgRels);
		}

		String signerRels = (String)attributes.get("signerRels");

		if (signerRels != null) {
			setSignerRels(signerRels);
		}

		String fieldRels = (String)attributes.get("fieldRels");

		if (fieldRels != null) {
			setFieldRels(fieldRels);
		}

		String numRels = (String)attributes.get("numRels");

		if (numRels != null) {
			setNumRels(numRels);
		}

		String docCode = (String)attributes.get("docCode");

		if (docCode != null) {
			setDocCode(docCode);
		}

		String departmentRels = (String)attributes.get("departmentRels");

		if (departmentRels != null) {
			setDepartmentRels(departmentRels);
		}
	}

	@Override
	public String getDocId() {
		if (_docId == null) {
			return StringPool.BLANK;
		}
		else {
			return _docId;
		}
	}

	@Override
	public void setDocId(String docId) {
		_columnBitmask |= DOCID_COLUMN_BITMASK;

		if (_originalDocId == null) {
			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public String getOriginalDocId() {
		return GetterUtil.getString(_originalDocId);
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getCreatedByUser() {
		return _createdByUser;
	}

	@Override
	public void setCreatedByUser(long createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (!_setOriginalCreatedByUser) {
			_setOriginalCreatedByUser = true;

			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public long getOriginalCreatedByUser() {
		return _originalCreatedByUser;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	@Override
	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getApprovedByUser() {
		return _approvedByUser;
	}

	@Override
	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@Override
	public long getForwardedByUser() {
		return _forwardedByUser;
	}

	@Override
	public void setForwardedByUser(long forwardedByUser) {
		_forwardedByUser = forwardedByUser;
	}

	@Override
	public Date getForwardedDate() {
		return _forwardedDate;
	}

	@Override
	public void setForwardedDate(Date forwardedDate) {
		_forwardedDate = forwardedDate;
	}

	@Override
	public long getPublishedByUser() {
		return _publishedByUser;
	}

	@Override
	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@Override
	public String getSymbol() {
		if (_symbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _symbol;
		}
	}

	@Override
	public void setSymbol(String symbol) {
		_columnBitmask |= SYMBOL_COLUMN_BITMASK;

		if (_originalSymbol == null) {
			_originalSymbol = _symbol;
		}

		_symbol = symbol;
	}

	public String getOriginalSymbol() {
		return GetterUtil.getString(_originalSymbol);
	}

	@Override
	public String getNum() {
		if (_num == null) {
			return StringPool.BLANK;
		}
		else {
			return _num;
		}
	}

	@Override
	public void setNum(String num) {
		_columnBitmask |= NUM_COLUMN_BITMASK;

		if (_originalNum == null) {
			_originalNum = _num;
		}

		_num = num;
	}

	public String getOriginalNum() {
		return GetterUtil.getString(_originalNum);
	}

	@Override
	public Date getPromulDate() {
		return _promulDate;
	}

	@Override
	public void setPromulDate(Date promulDate) {
		_columnBitmask = -1L;

		_promulDate = promulDate;
	}

	@Override
	public Date getEffectivedDate() {
		return _effectivedDate;
	}

	@Override
	public void setEffectivedDate(Date effectivedDate) {
		_effectivedDate = effectivedDate;
	}

	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@Override
	public String getReplaceDoc() {
		if (_replaceDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _replaceDoc;
		}
	}

	@Override
	public void setReplaceDoc(String replaceDoc) {
		_replaceDoc = replaceDoc;
	}

	@Override
	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@Override
	public int getStatusDoc() {
		return _statusDoc;
	}

	@Override
	public void setStatusDoc(int statusDoc) {
		_columnBitmask |= STATUSDOC_COLUMN_BITMASK;

		if (!_setOriginalStatusDoc) {
			_setOriginalStatusDoc = true;

			_originalStatusDoc = _statusDoc;
		}

		_statusDoc = statusDoc;
	}

	public int getOriginalStatusDoc() {
		return _originalStatusDoc;
	}

	@Override
	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	@Override
	public String getTypeDocId() {
		if (_typeDocId == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeDocId;
		}
	}

	@Override
	public void setTypeDocId(String typeDocId) {
		_columnBitmask |= TYPEDOCID_COLUMN_BITMASK;

		if (_originalTypeDocId == null) {
			_originalTypeDocId = _typeDocId;
		}

		_typeDocId = typeDocId;
	}

	public String getOriginalTypeDocId() {
		return GetterUtil.getString(_originalTypeDocId);
	}

	@Override
	public String getFieldId() {
		if (_fieldId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldId;
		}
	}

	@Override
	public void setFieldId(String fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (_originalFieldId == null) {
			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public String getOriginalFieldId() {
		return GetterUtil.getString(_originalFieldId);
	}

	@Override
	public String getOrgId() {
		if (_orgId == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgId;
		}
	}

	@Override
	public void setOrgId(String orgId) {
		_columnBitmask |= ORGID_COLUMN_BITMASK;

		if (_originalOrgId == null) {
			_originalOrgId = _orgId;
		}

		_orgId = orgId;
	}

	public String getOriginalOrgId() {
		return GetterUtil.getString(_originalOrgId);
	}

	@Override
	public String getOrgRels() {
		if (_orgRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgRels;
		}
	}

	@Override
	public void setOrgRels(String orgRels) {
		_orgRels = orgRels;
	}

	@Override
	public String getSignerRels() {
		if (_signerRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _signerRels;
		}
	}

	@Override
	public void setSignerRels(String signerRels) {
		_signerRels = signerRels;
	}

	@Override
	public String getFieldRels() {
		if (_fieldRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldRels;
		}
	}

	@Override
	public void setFieldRels(String fieldRels) {
		_fieldRels = fieldRels;
	}

	@Override
	public String getNumRels() {
		if (_numRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _numRels;
		}
	}

	@Override
	public void setNumRels(String numRels) {
		_numRels = numRels;
	}

	@Override
	public String getDocCode() {
		if (_docCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _docCode;
		}
	}

	@Override
	public void setDocCode(String docCode) {
		_docCode = docCode;
	}

	@Override
	public String getDepartmentRels() {
		if (_departmentRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentRels;
		}
	}

	@Override
	public void setDepartmentRels(String departmentRels) {
		_departmentRels = departmentRels;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VLegalDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VLegalDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VLegalDocumentImpl vLegalDocumentImpl = new VLegalDocumentImpl();

		vLegalDocumentImpl.setDocId(getDocId());
		vLegalDocumentImpl.setGroupId(getGroupId());
		vLegalDocumentImpl.setCompanyId(getCompanyId());
		vLegalDocumentImpl.setUserId(getUserId());
		vLegalDocumentImpl.setCreatedByUser(getCreatedByUser());
		vLegalDocumentImpl.setCreatedDate(getCreatedDate());
		vLegalDocumentImpl.setModifiedByUser(getModifiedByUser());
		vLegalDocumentImpl.setModifiedDate(getModifiedDate());
		vLegalDocumentImpl.setApprovedByUser(getApprovedByUser());
		vLegalDocumentImpl.setApprovedDate(getApprovedDate());
		vLegalDocumentImpl.setForwardedByUser(getForwardedByUser());
		vLegalDocumentImpl.setForwardedDate(getForwardedDate());
		vLegalDocumentImpl.setPublishedByUser(getPublishedByUser());
		vLegalDocumentImpl.setPublishedDate(getPublishedDate());
		vLegalDocumentImpl.setSymbol(getSymbol());
		vLegalDocumentImpl.setNum(getNum());
		vLegalDocumentImpl.setPromulDate(getPromulDate());
		vLegalDocumentImpl.setEffectivedDate(getEffectivedDate());
		vLegalDocumentImpl.setExpiredDate(getExpiredDate());
		vLegalDocumentImpl.setReplaceDoc(getReplaceDoc());
		vLegalDocumentImpl.setSummary(getSummary());
		vLegalDocumentImpl.setContent(getContent());
		vLegalDocumentImpl.setLanguage(getLanguage());
		vLegalDocumentImpl.setUserHit(getUserHit());
		vLegalDocumentImpl.setStatusDoc(getStatusDoc());
		vLegalDocumentImpl.setHasAttachment(getHasAttachment());
		vLegalDocumentImpl.setTypeDocId(getTypeDocId());
		vLegalDocumentImpl.setFieldId(getFieldId());
		vLegalDocumentImpl.setOrgId(getOrgId());
		vLegalDocumentImpl.setOrgRels(getOrgRels());
		vLegalDocumentImpl.setSignerRels(getSignerRels());
		vLegalDocumentImpl.setFieldRels(getFieldRels());
		vLegalDocumentImpl.setNumRels(getNumRels());
		vLegalDocumentImpl.setDocCode(getDocCode());
		vLegalDocumentImpl.setDepartmentRels(getDepartmentRels());

		vLegalDocumentImpl.resetOriginalValues();

		return vLegalDocumentImpl;
	}

	@Override
	public int compareTo(VLegalDocument vLegalDocument) {
		int value = 0;

		value = DateUtil.compareTo(getPromulDate(),
				vLegalDocument.getPromulDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VLegalDocument)) {
			return false;
		}

		VLegalDocument vLegalDocument = (VLegalDocument)obj;

		String primaryKey = vLegalDocument.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VLegalDocumentModelImpl vLegalDocumentModelImpl = this;

		vLegalDocumentModelImpl._originalDocId = vLegalDocumentModelImpl._docId;

		vLegalDocumentModelImpl._originalGroupId = vLegalDocumentModelImpl._groupId;

		vLegalDocumentModelImpl._setOriginalGroupId = false;

		vLegalDocumentModelImpl._originalUserId = vLegalDocumentModelImpl._userId;

		vLegalDocumentModelImpl._setOriginalUserId = false;

		vLegalDocumentModelImpl._originalCreatedByUser = vLegalDocumentModelImpl._createdByUser;

		vLegalDocumentModelImpl._setOriginalCreatedByUser = false;

		vLegalDocumentModelImpl._originalSymbol = vLegalDocumentModelImpl._symbol;

		vLegalDocumentModelImpl._originalNum = vLegalDocumentModelImpl._num;

		vLegalDocumentModelImpl._originalLanguage = vLegalDocumentModelImpl._language;

		vLegalDocumentModelImpl._originalStatusDoc = vLegalDocumentModelImpl._statusDoc;

		vLegalDocumentModelImpl._setOriginalStatusDoc = false;

		vLegalDocumentModelImpl._originalTypeDocId = vLegalDocumentModelImpl._typeDocId;

		vLegalDocumentModelImpl._originalFieldId = vLegalDocumentModelImpl._fieldId;

		vLegalDocumentModelImpl._originalOrgId = vLegalDocumentModelImpl._orgId;

		vLegalDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VLegalDocument> toCacheModel() {
		VLegalDocumentCacheModel vLegalDocumentCacheModel = new VLegalDocumentCacheModel();

		vLegalDocumentCacheModel.docId = getDocId();

		String docId = vLegalDocumentCacheModel.docId;

		if ((docId != null) && (docId.length() == 0)) {
			vLegalDocumentCacheModel.docId = null;
		}

		vLegalDocumentCacheModel.groupId = getGroupId();

		vLegalDocumentCacheModel.companyId = getCompanyId();

		vLegalDocumentCacheModel.userId = getUserId();

		vLegalDocumentCacheModel.createdByUser = getCreatedByUser();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vLegalDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.modifiedByUser = getModifiedByUser();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vLegalDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.approvedByUser = getApprovedByUser();

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			vLegalDocumentCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.forwardedByUser = getForwardedByUser();

		Date forwardedDate = getForwardedDate();

		if (forwardedDate != null) {
			vLegalDocumentCacheModel.forwardedDate = forwardedDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.forwardedDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.publishedByUser = getPublishedByUser();

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			vLegalDocumentCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.publishedDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.symbol = getSymbol();

		String symbol = vLegalDocumentCacheModel.symbol;

		if ((symbol != null) && (symbol.length() == 0)) {
			vLegalDocumentCacheModel.symbol = null;
		}

		vLegalDocumentCacheModel.num = getNum();

		String num = vLegalDocumentCacheModel.num;

		if ((num != null) && (num.length() == 0)) {
			vLegalDocumentCacheModel.num = null;
		}

		Date promulDate = getPromulDate();

		if (promulDate != null) {
			vLegalDocumentCacheModel.promulDate = promulDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.promulDate = Long.MIN_VALUE;
		}

		Date effectivedDate = getEffectivedDate();

		if (effectivedDate != null) {
			vLegalDocumentCacheModel.effectivedDate = effectivedDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.effectivedDate = Long.MIN_VALUE;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			vLegalDocumentCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			vLegalDocumentCacheModel.expiredDate = Long.MIN_VALUE;
		}

		vLegalDocumentCacheModel.replaceDoc = getReplaceDoc();

		String replaceDoc = vLegalDocumentCacheModel.replaceDoc;

		if ((replaceDoc != null) && (replaceDoc.length() == 0)) {
			vLegalDocumentCacheModel.replaceDoc = null;
		}

		vLegalDocumentCacheModel.summary = getSummary();

		String summary = vLegalDocumentCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			vLegalDocumentCacheModel.summary = null;
		}

		vLegalDocumentCacheModel.content = getContent();

		String content = vLegalDocumentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			vLegalDocumentCacheModel.content = null;
		}

		vLegalDocumentCacheModel.language = getLanguage();

		String language = vLegalDocumentCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			vLegalDocumentCacheModel.language = null;
		}

		vLegalDocumentCacheModel.userHit = getUserHit();

		vLegalDocumentCacheModel.statusDoc = getStatusDoc();

		vLegalDocumentCacheModel.hasAttachment = getHasAttachment();

		vLegalDocumentCacheModel.typeDocId = getTypeDocId();

		String typeDocId = vLegalDocumentCacheModel.typeDocId;

		if ((typeDocId != null) && (typeDocId.length() == 0)) {
			vLegalDocumentCacheModel.typeDocId = null;
		}

		vLegalDocumentCacheModel.fieldId = getFieldId();

		String fieldId = vLegalDocumentCacheModel.fieldId;

		if ((fieldId != null) && (fieldId.length() == 0)) {
			vLegalDocumentCacheModel.fieldId = null;
		}

		vLegalDocumentCacheModel.orgId = getOrgId();

		String orgId = vLegalDocumentCacheModel.orgId;

		if ((orgId != null) && (orgId.length() == 0)) {
			vLegalDocumentCacheModel.orgId = null;
		}

		vLegalDocumentCacheModel.orgRels = getOrgRels();

		String orgRels = vLegalDocumentCacheModel.orgRels;

		if ((orgRels != null) && (orgRels.length() == 0)) {
			vLegalDocumentCacheModel.orgRels = null;
		}

		vLegalDocumentCacheModel.signerRels = getSignerRels();

		String signerRels = vLegalDocumentCacheModel.signerRels;

		if ((signerRels != null) && (signerRels.length() == 0)) {
			vLegalDocumentCacheModel.signerRels = null;
		}

		vLegalDocumentCacheModel.fieldRels = getFieldRels();

		String fieldRels = vLegalDocumentCacheModel.fieldRels;

		if ((fieldRels != null) && (fieldRels.length() == 0)) {
			vLegalDocumentCacheModel.fieldRels = null;
		}

		vLegalDocumentCacheModel.numRels = getNumRels();

		String numRels = vLegalDocumentCacheModel.numRels;

		if ((numRels != null) && (numRels.length() == 0)) {
			vLegalDocumentCacheModel.numRels = null;
		}

		vLegalDocumentCacheModel.docCode = getDocCode();

		String docCode = vLegalDocumentCacheModel.docCode;

		if ((docCode != null) && (docCode.length() == 0)) {
			vLegalDocumentCacheModel.docCode = null;
		}

		vLegalDocumentCacheModel.departmentRels = getDepartmentRels();

		String departmentRels = vLegalDocumentCacheModel.departmentRels;

		if ((departmentRels != null) && (departmentRels.length() == 0)) {
			vLegalDocumentCacheModel.departmentRels = null;
		}

		return vLegalDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{docId=");
		sb.append(getDocId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", approvedByUser=");
		sb.append(getApprovedByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", forwardedByUser=");
		sb.append(getForwardedByUser());
		sb.append(", forwardedDate=");
		sb.append(getForwardedDate());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", symbol=");
		sb.append(getSymbol());
		sb.append(", num=");
		sb.append(getNum());
		sb.append(", promulDate=");
		sb.append(getPromulDate());
		sb.append(", effectivedDate=");
		sb.append(getEffectivedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", replaceDoc=");
		sb.append(getReplaceDoc());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", statusDoc=");
		sb.append(getStatusDoc());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", typeDocId=");
		sb.append(getTypeDocId());
		sb.append(", fieldId=");
		sb.append(getFieldId());
		sb.append(", orgId=");
		sb.append(getOrgId());
		sb.append(", orgRels=");
		sb.append(getOrgRels());
		sb.append(", signerRels=");
		sb.append(getSignerRels());
		sb.append(", fieldRels=");
		sb.append(getFieldRels());
		sb.append(", numRels=");
		sb.append(getNumRels());
		sb.append(", docCode=");
		sb.append(getDocCode());
		sb.append(", departmentRels=");
		sb.append(getDepartmentRels());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VLegalDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>docId</column-name><column-value><![CDATA[");
		sb.append(getDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedByUser</column-name><column-value><![CDATA[");
		sb.append(getApprovedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forwardedByUser</column-name><column-value><![CDATA[");
		sb.append(getForwardedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forwardedDate</column-name><column-value><![CDATA[");
		sb.append(getForwardedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symbol</column-name><column-value><![CDATA[");
		sb.append(getSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>num</column-name><column-value><![CDATA[");
		sb.append(getNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>promulDate</column-name><column-value><![CDATA[");
		sb.append(getPromulDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectivedDate</column-name><column-value><![CDATA[");
		sb.append(getEffectivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replaceDoc</column-name><column-value><![CDATA[");
		sb.append(getReplaceDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDoc</column-name><column-value><![CDATA[");
		sb.append(getStatusDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeDocId</column-name><column-value><![CDATA[");
		sb.append(getTypeDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgId</column-name><column-value><![CDATA[");
		sb.append(getOrgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgRels</column-name><column-value><![CDATA[");
		sb.append(getOrgRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerRels</column-name><column-value><![CDATA[");
		sb.append(getSignerRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldRels</column-name><column-value><![CDATA[");
		sb.append(getFieldRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numRels</column-name><column-value><![CDATA[");
		sb.append(getNumRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docCode</column-name><column-value><![CDATA[");
		sb.append(getDocCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentRels</column-name><column-value><![CDATA[");
		sb.append(getDepartmentRels());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VLegalDocument.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VLegalDocument.class
		};
	private String _docId;
	private String _originalDocId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _createdByUser;
	private long _originalCreatedByUser;
	private boolean _setOriginalCreatedByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _forwardedByUser;
	private Date _forwardedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private String _symbol;
	private String _originalSymbol;
	private String _num;
	private String _originalNum;
	private Date _promulDate;
	private Date _effectivedDate;
	private Date _expiredDate;
	private String _replaceDoc;
	private String _summary;
	private String _content;
	private String _language;
	private String _originalLanguage;
	private int _userHit;
	private int _statusDoc;
	private int _originalStatusDoc;
	private boolean _setOriginalStatusDoc;
	private boolean _hasAttachment;
	private String _typeDocId;
	private String _originalTypeDocId;
	private String _fieldId;
	private String _originalFieldId;
	private String _orgId;
	private String _originalOrgId;
	private String _orgRels;
	private String _signerRels;
	private String _fieldRels;
	private String _numRels;
	private String _docCode;
	private String _departmentRels;
	private long _columnBitmask;
	private VLegalDocument _escapedModel;
}