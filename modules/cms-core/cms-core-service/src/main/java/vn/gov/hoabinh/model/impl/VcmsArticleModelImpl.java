/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.VcmsArticle;
import vn.gov.hoabinh.model.VcmsArticleModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VcmsArticle service. Represents a row in the &quot;VcmsArticle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VcmsArticleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VcmsArticleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VcmsArticleImpl
 * @see VcmsArticle
 * @see VcmsArticleModel
 * @generated
 */
@ProviderType
public class VcmsArticleModelImpl extends BaseModelImpl<VcmsArticle>
	implements VcmsArticleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vcms article model instance should use the {@link VcmsArticle} interface instead.
	 */
	public static final String TABLE_NAME = "VcmsArticle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "articleId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdByUser", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedByUser", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "approvedByUser", Types.VARCHAR },
			{ "approvedDate", Types.TIMESTAMP },
			{ "publishedByUser", Types.VARCHAR },
			{ "publishedDate", Types.TIMESTAMP },
			{ "status", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "lead", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "version", Types.DOUBLE },
			{ "hasImage", Types.BOOLEAN },
			{ "imageTitle", Types.VARCHAR },
			{ "image", Types.VARCHAR },
			{ "author", Types.VARCHAR },
			{ "source", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "userHit", Types.INTEGER },
			{ "discussible", Types.BOOLEAN },
			{ "hasAttachment", Types.BOOLEAN },
			{ "hasPoll", Types.BOOLEAN },
			{ "pollId", Types.VARCHAR },
			{ "effectiveDate", Types.TIMESTAMP },
			{ "expireDate", Types.TIMESTAMP },
			{ "sticky", Types.BOOLEAN },
			{ "stickyNeverExpired", Types.BOOLEAN },
			{ "stickyExpireDate", Types.TIMESTAMP },
			{ "categoryId", Types.VARCHAR },
			{ "soundLink", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("articleId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publishedByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lead", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("hasImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("imageTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userHit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("discussible", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasAttachment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasPoll", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pollId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("effectiveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sticky", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stickyNeverExpired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stickyExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("categoryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soundLink", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table VcmsArticle (articleId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,createdByUser VARCHAR(75) null,createdDate DATE null,modifiedByUser VARCHAR(75) null,modifiedDate DATE null,approvedByUser VARCHAR(75) null,approvedDate DATE null,publishedByUser VARCHAR(75) null,publishedDate DATE null,status LONG,title VARCHAR(75) null,lead VARCHAR(75) null,content VARCHAR(75) null,version DOUBLE,hasImage BOOLEAN,imageTitle VARCHAR(75) null,image VARCHAR(75) null,author VARCHAR(75) null,source VARCHAR(75) null,language VARCHAR(75) null,userHit INTEGER,discussible BOOLEAN,hasAttachment BOOLEAN,hasPoll BOOLEAN,pollId VARCHAR(75) null,effectiveDate DATE null,expireDate DATE null,sticky BOOLEAN,stickyNeverExpired BOOLEAN,stickyExpireDate DATE null,categoryId VARCHAR(75) null,soundLink VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table VcmsArticle";
	public static final String ORDER_BY_JPQL = " ORDER BY vcmsArticle.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VcmsArticle.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.VcmsArticle"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.VcmsArticle"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.VcmsArticle"),
			true);
	public static final long ARTICLEID_COLUMN_BITMASK = 1L;
	public static final long CATEGORYID_COLUMN_BITMASK = 2L;
	public static final long CREATEDBYUSER_COLUMN_BITMASK = 4L;
	public static final long DISCUSSIBLE_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long LANGUAGE_COLUMN_BITMASK = 32L;
	public static final long STATUS_COLUMN_BITMASK = 64L;
	public static final long STICKY_COLUMN_BITMASK = 128L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.VcmsArticle"));

	public VcmsArticleModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _articleId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VcmsArticle.class;
	}

	@Override
	public String getModelClassName() {
		return VcmsArticle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("articleId", getArticleId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdByUser", getCreatedByUser());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedByUser", getModifiedByUser());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("approvedByUser", getApprovedByUser());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("publishedByUser", getPublishedByUser());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("status", getStatus());
		attributes.put("title", getTitle());
		attributes.put("lead", getLead());
		attributes.put("content", getContent());
		attributes.put("version", getVersion());
		attributes.put("hasImage", getHasImage());
		attributes.put("imageTitle", getImageTitle());
		attributes.put("image", getImage());
		attributes.put("author", getAuthor());
		attributes.put("source", getSource());
		attributes.put("language", getLanguage());
		attributes.put("userHit", getUserHit());
		attributes.put("discussible", getDiscussible());
		attributes.put("hasAttachment", getHasAttachment());
		attributes.put("hasPoll", getHasPoll());
		attributes.put("pollId", getPollId());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("expireDate", getExpireDate());
		attributes.put("sticky", getSticky());
		attributes.put("stickyNeverExpired", getStickyNeverExpired());
		attributes.put("stickyExpireDate", getStickyExpireDate());
		attributes.put("categoryId", getCategoryId());
		attributes.put("soundLink", getSoundLink());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String articleId = (String)attributes.get("articleId");

		if (articleId != null) {
			setArticleId(articleId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String createdByUser = (String)attributes.get("createdByUser");

		if (createdByUser != null) {
			setCreatedByUser(createdByUser);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String modifiedByUser = (String)attributes.get("modifiedByUser");

		if (modifiedByUser != null) {
			setModifiedByUser(modifiedByUser);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String approvedByUser = (String)attributes.get("approvedByUser");

		if (approvedByUser != null) {
			setApprovedByUser(approvedByUser);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		String publishedByUser = (String)attributes.get("publishedByUser");

		if (publishedByUser != null) {
			setPublishedByUser(publishedByUser);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String lead = (String)attributes.get("lead");

		if (lead != null) {
			setLead(lead);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Double version = (Double)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Boolean hasImage = (Boolean)attributes.get("hasImage");

		if (hasImage != null) {
			setHasImage(hasImage);
		}

		String imageTitle = (String)attributes.get("imageTitle");

		if (imageTitle != null) {
			setImageTitle(imageTitle);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Integer userHit = (Integer)attributes.get("userHit");

		if (userHit != null) {
			setUserHit(userHit);
		}

		Boolean discussible = (Boolean)attributes.get("discussible");

		if (discussible != null) {
			setDiscussible(discussible);
		}

		Boolean hasAttachment = (Boolean)attributes.get("hasAttachment");

		if (hasAttachment != null) {
			setHasAttachment(hasAttachment);
		}

		Boolean hasPoll = (Boolean)attributes.get("hasPoll");

		if (hasPoll != null) {
			setHasPoll(hasPoll);
		}

		String pollId = (String)attributes.get("pollId");

		if (pollId != null) {
			setPollId(pollId);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		Boolean sticky = (Boolean)attributes.get("sticky");

		if (sticky != null) {
			setSticky(sticky);
		}

		Boolean stickyNeverExpired = (Boolean)attributes.get(
				"stickyNeverExpired");

		if (stickyNeverExpired != null) {
			setStickyNeverExpired(stickyNeverExpired);
		}

		Date stickyExpireDate = (Date)attributes.get("stickyExpireDate");

		if (stickyExpireDate != null) {
			setStickyExpireDate(stickyExpireDate);
		}

		String categoryId = (String)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String soundLink = (String)attributes.get("soundLink");

		if (soundLink != null) {
			setSoundLink(soundLink);
		}
	}

	@Override
	public String getArticleId() {
		if (_articleId == null) {
			return StringPool.BLANK;
		}
		else {
			return _articleId;
		}
	}

	@Override
	public void setArticleId(String articleId) {
		_columnBitmask |= ARTICLEID_COLUMN_BITMASK;

		if (_originalArticleId == null) {
			_originalArticleId = _articleId;
		}

		_articleId = articleId;
	}

	public String getOriginalArticleId() {
		return GetterUtil.getString(_originalArticleId);
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getCreatedByUser() {
		if (_createdByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUser;
		}
	}

	@Override
	public void setCreatedByUser(String createdByUser) {
		_columnBitmask |= CREATEDBYUSER_COLUMN_BITMASK;

		if (_originalCreatedByUser == null) {
			_originalCreatedByUser = _createdByUser;
		}

		_createdByUser = createdByUser;
	}

	public String getOriginalCreatedByUser() {
		return GetterUtil.getString(_originalCreatedByUser);
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getModifiedByUser() {
		if (_modifiedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedByUser;
		}
	}

	@Override
	public void setModifiedByUser(String modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getApprovedByUser() {
		if (_approvedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvedByUser;
		}
	}

	@Override
	public void setApprovedByUser(String approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@Override
	public String getPublishedByUser() {
		if (_publishedByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishedByUser;
		}
	}

	@Override
	public void setPublishedByUser(String publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getLead() {
		if (_lead == null) {
			return StringPool.BLANK;
		}
		else {
			return _lead;
		}
	}

	@Override
	public void setLead(String lead) {
		_lead = lead;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		_version = version;
	}

	@Override
	public boolean getHasImage() {
		return _hasImage;
	}

	@Override
	public boolean isHasImage() {
		return _hasImage;
	}

	@Override
	public void setHasImage(boolean hasImage) {
		_hasImage = hasImage;
	}

	@Override
	public String getImageTitle() {
		if (_imageTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageTitle;
		}
	}

	@Override
	public void setImageTitle(String imageTitle) {
		_imageTitle = imageTitle;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_columnBitmask |= LANGUAGE_COLUMN_BITMASK;

		if (_originalLanguage == null) {
			_originalLanguage = _language;
		}

		_language = language;
	}

	public String getOriginalLanguage() {
		return GetterUtil.getString(_originalLanguage);
	}

	@Override
	public int getUserHit() {
		return _userHit;
	}

	@Override
	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	@Override
	public boolean getDiscussible() {
		return _discussible;
	}

	@Override
	public boolean isDiscussible() {
		return _discussible;
	}

	@Override
	public void setDiscussible(boolean discussible) {
		_columnBitmask |= DISCUSSIBLE_COLUMN_BITMASK;

		if (!_setOriginalDiscussible) {
			_setOriginalDiscussible = true;

			_originalDiscussible = _discussible;
		}

		_discussible = discussible;
	}

	public boolean getOriginalDiscussible() {
		return _originalDiscussible;
	}

	@Override
	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	@Override
	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	@Override
	public boolean getHasPoll() {
		return _hasPoll;
	}

	@Override
	public boolean isHasPoll() {
		return _hasPoll;
	}

	@Override
	public void setHasPoll(boolean hasPoll) {
		_hasPoll = hasPoll;
	}

	@Override
	public String getPollId() {
		if (_pollId == null) {
			return StringPool.BLANK;
		}
		else {
			return _pollId;
		}
	}

	@Override
	public void setPollId(String pollId) {
		_pollId = pollId;
	}

	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_expireDate = expireDate;
	}

	@Override
	public boolean getSticky() {
		return _sticky;
	}

	@Override
	public boolean isSticky() {
		return _sticky;
	}

	@Override
	public void setSticky(boolean sticky) {
		_columnBitmask |= STICKY_COLUMN_BITMASK;

		if (!_setOriginalSticky) {
			_setOriginalSticky = true;

			_originalSticky = _sticky;
		}

		_sticky = sticky;
	}

	public boolean getOriginalSticky() {
		return _originalSticky;
	}

	@Override
	public boolean getStickyNeverExpired() {
		return _stickyNeverExpired;
	}

	@Override
	public boolean isStickyNeverExpired() {
		return _stickyNeverExpired;
	}

	@Override
	public void setStickyNeverExpired(boolean stickyNeverExpired) {
		_stickyNeverExpired = stickyNeverExpired;
	}

	@Override
	public Date getStickyExpireDate() {
		return _stickyExpireDate;
	}

	@Override
	public void setStickyExpireDate(Date stickyExpireDate) {
		_stickyExpireDate = stickyExpireDate;
	}

	@Override
	public String getCategoryId() {
		if (_categoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryId;
		}
	}

	@Override
	public void setCategoryId(String categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (_originalCategoryId == null) {
			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public String getOriginalCategoryId() {
		return GetterUtil.getString(_originalCategoryId);
	}

	@Override
	public String getSoundLink() {
		if (_soundLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _soundLink;
		}
	}

	@Override
	public void setSoundLink(String soundLink) {
		_soundLink = soundLink;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VcmsArticle toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VcmsArticle)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VcmsArticleImpl vcmsArticleImpl = new VcmsArticleImpl();

		vcmsArticleImpl.setArticleId(getArticleId());
		vcmsArticleImpl.setGroupId(getGroupId());
		vcmsArticleImpl.setCompanyId(getCompanyId());
		vcmsArticleImpl.setCreatedByUser(getCreatedByUser());
		vcmsArticleImpl.setCreatedDate(getCreatedDate());
		vcmsArticleImpl.setModifiedByUser(getModifiedByUser());
		vcmsArticleImpl.setModifiedDate(getModifiedDate());
		vcmsArticleImpl.setApprovedByUser(getApprovedByUser());
		vcmsArticleImpl.setApprovedDate(getApprovedDate());
		vcmsArticleImpl.setPublishedByUser(getPublishedByUser());
		vcmsArticleImpl.setPublishedDate(getPublishedDate());
		vcmsArticleImpl.setStatus(getStatus());
		vcmsArticleImpl.setTitle(getTitle());
		vcmsArticleImpl.setLead(getLead());
		vcmsArticleImpl.setContent(getContent());
		vcmsArticleImpl.setVersion(getVersion());
		vcmsArticleImpl.setHasImage(getHasImage());
		vcmsArticleImpl.setImageTitle(getImageTitle());
		vcmsArticleImpl.setImage(getImage());
		vcmsArticleImpl.setAuthor(getAuthor());
		vcmsArticleImpl.setSource(getSource());
		vcmsArticleImpl.setLanguage(getLanguage());
		vcmsArticleImpl.setUserHit(getUserHit());
		vcmsArticleImpl.setDiscussible(getDiscussible());
		vcmsArticleImpl.setHasAttachment(getHasAttachment());
		vcmsArticleImpl.setHasPoll(getHasPoll());
		vcmsArticleImpl.setPollId(getPollId());
		vcmsArticleImpl.setEffectiveDate(getEffectiveDate());
		vcmsArticleImpl.setExpireDate(getExpireDate());
		vcmsArticleImpl.setSticky(getSticky());
		vcmsArticleImpl.setStickyNeverExpired(getStickyNeverExpired());
		vcmsArticleImpl.setStickyExpireDate(getStickyExpireDate());
		vcmsArticleImpl.setCategoryId(getCategoryId());
		vcmsArticleImpl.setSoundLink(getSoundLink());

		vcmsArticleImpl.resetOriginalValues();

		return vcmsArticleImpl;
	}

	@Override
	public int compareTo(VcmsArticle vcmsArticle) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				vcmsArticle.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VcmsArticle)) {
			return false;
		}

		VcmsArticle vcmsArticle = (VcmsArticle)obj;

		String primaryKey = vcmsArticle.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VcmsArticleModelImpl vcmsArticleModelImpl = this;

		vcmsArticleModelImpl._originalArticleId = vcmsArticleModelImpl._articleId;

		vcmsArticleModelImpl._originalGroupId = vcmsArticleModelImpl._groupId;

		vcmsArticleModelImpl._setOriginalGroupId = false;

		vcmsArticleModelImpl._originalCreatedByUser = vcmsArticleModelImpl._createdByUser;

		vcmsArticleModelImpl._originalStatus = vcmsArticleModelImpl._status;

		vcmsArticleModelImpl._setOriginalStatus = false;

		vcmsArticleModelImpl._originalLanguage = vcmsArticleModelImpl._language;

		vcmsArticleModelImpl._originalDiscussible = vcmsArticleModelImpl._discussible;

		vcmsArticleModelImpl._setOriginalDiscussible = false;

		vcmsArticleModelImpl._originalSticky = vcmsArticleModelImpl._sticky;

		vcmsArticleModelImpl._setOriginalSticky = false;

		vcmsArticleModelImpl._originalCategoryId = vcmsArticleModelImpl._categoryId;

		vcmsArticleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VcmsArticle> toCacheModel() {
		VcmsArticleCacheModel vcmsArticleCacheModel = new VcmsArticleCacheModel();

		vcmsArticleCacheModel.articleId = getArticleId();

		String articleId = vcmsArticleCacheModel.articleId;

		if ((articleId != null) && (articleId.length() == 0)) {
			vcmsArticleCacheModel.articleId = null;
		}

		vcmsArticleCacheModel.groupId = getGroupId();

		vcmsArticleCacheModel.companyId = getCompanyId();

		vcmsArticleCacheModel.createdByUser = getCreatedByUser();

		String createdByUser = vcmsArticleCacheModel.createdByUser;

		if ((createdByUser != null) && (createdByUser.length() == 0)) {
			vcmsArticleCacheModel.createdByUser = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			vcmsArticleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			vcmsArticleCacheModel.createdDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.modifiedByUser = getModifiedByUser();

		String modifiedByUser = vcmsArticleCacheModel.modifiedByUser;

		if ((modifiedByUser != null) && (modifiedByUser.length() == 0)) {
			vcmsArticleCacheModel.modifiedByUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vcmsArticleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vcmsArticleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.approvedByUser = getApprovedByUser();

		String approvedByUser = vcmsArticleCacheModel.approvedByUser;

		if ((approvedByUser != null) && (approvedByUser.length() == 0)) {
			vcmsArticleCacheModel.approvedByUser = null;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			vcmsArticleCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			vcmsArticleCacheModel.approvedDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.publishedByUser = getPublishedByUser();

		String publishedByUser = vcmsArticleCacheModel.publishedByUser;

		if ((publishedByUser != null) && (publishedByUser.length() == 0)) {
			vcmsArticleCacheModel.publishedByUser = null;
		}

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			vcmsArticleCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			vcmsArticleCacheModel.publishedDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.status = getStatus();

		vcmsArticleCacheModel.title = getTitle();

		String title = vcmsArticleCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			vcmsArticleCacheModel.title = null;
		}

		vcmsArticleCacheModel.lead = getLead();

		String lead = vcmsArticleCacheModel.lead;

		if ((lead != null) && (lead.length() == 0)) {
			vcmsArticleCacheModel.lead = null;
		}

		vcmsArticleCacheModel.content = getContent();

		String content = vcmsArticleCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			vcmsArticleCacheModel.content = null;
		}

		vcmsArticleCacheModel.version = getVersion();

		vcmsArticleCacheModel.hasImage = getHasImage();

		vcmsArticleCacheModel.imageTitle = getImageTitle();

		String imageTitle = vcmsArticleCacheModel.imageTitle;

		if ((imageTitle != null) && (imageTitle.length() == 0)) {
			vcmsArticleCacheModel.imageTitle = null;
		}

		vcmsArticleCacheModel.image = getImage();

		String image = vcmsArticleCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			vcmsArticleCacheModel.image = null;
		}

		vcmsArticleCacheModel.author = getAuthor();

		String author = vcmsArticleCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			vcmsArticleCacheModel.author = null;
		}

		vcmsArticleCacheModel.source = getSource();

		String source = vcmsArticleCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			vcmsArticleCacheModel.source = null;
		}

		vcmsArticleCacheModel.language = getLanguage();

		String language = vcmsArticleCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			vcmsArticleCacheModel.language = null;
		}

		vcmsArticleCacheModel.userHit = getUserHit();

		vcmsArticleCacheModel.discussible = getDiscussible();

		vcmsArticleCacheModel.hasAttachment = getHasAttachment();

		vcmsArticleCacheModel.hasPoll = getHasPoll();

		vcmsArticleCacheModel.pollId = getPollId();

		String pollId = vcmsArticleCacheModel.pollId;

		if ((pollId != null) && (pollId.length() == 0)) {
			vcmsArticleCacheModel.pollId = null;
		}

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			vcmsArticleCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			vcmsArticleCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			vcmsArticleCacheModel.expireDate = expireDate.getTime();
		}
		else {
			vcmsArticleCacheModel.expireDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.sticky = getSticky();

		vcmsArticleCacheModel.stickyNeverExpired = getStickyNeverExpired();

		Date stickyExpireDate = getStickyExpireDate();

		if (stickyExpireDate != null) {
			vcmsArticleCacheModel.stickyExpireDate = stickyExpireDate.getTime();
		}
		else {
			vcmsArticleCacheModel.stickyExpireDate = Long.MIN_VALUE;
		}

		vcmsArticleCacheModel.categoryId = getCategoryId();

		String categoryId = vcmsArticleCacheModel.categoryId;

		if ((categoryId != null) && (categoryId.length() == 0)) {
			vcmsArticleCacheModel.categoryId = null;
		}

		vcmsArticleCacheModel.soundLink = getSoundLink();

		String soundLink = vcmsArticleCacheModel.soundLink;

		if ((soundLink != null) && (soundLink.length() == 0)) {
			vcmsArticleCacheModel.soundLink = null;
		}

		return vcmsArticleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(69);

		sb.append("{articleId=");
		sb.append(getArticleId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", approvedByUser=");
		sb.append(getApprovedByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", lead=");
		sb.append(getLead());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", hasImage=");
		sb.append(getHasImage());
		sb.append(", imageTitle=");
		sb.append(getImageTitle());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", discussible=");
		sb.append(getDiscussible());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", hasPoll=");
		sb.append(getHasPoll());
		sb.append(", pollId=");
		sb.append(getPollId());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", sticky=");
		sb.append(getSticky());
		sb.append(", stickyNeverExpired=");
		sb.append(getStickyNeverExpired());
		sb.append(", stickyExpireDate=");
		sb.append(getStickyExpireDate());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", soundLink=");
		sb.append(getSoundLink());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(106);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.VcmsArticle");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>articleId</column-name><column-value><![CDATA[");
		sb.append(getArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedByUser</column-name><column-value><![CDATA[");
		sb.append(getApprovedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lead</column-name><column-value><![CDATA[");
		sb.append(getLead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasImage</column-name><column-value><![CDATA[");
		sb.append(getHasImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageTitle</column-name><column-value><![CDATA[");
		sb.append(getImageTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discussible</column-name><column-value><![CDATA[");
		sb.append(getDiscussible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasPoll</column-name><column-value><![CDATA[");
		sb.append(getHasPoll());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pollId</column-name><column-value><![CDATA[");
		sb.append(getPollId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sticky</column-name><column-value><![CDATA[");
		sb.append(getSticky());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stickyNeverExpired</column-name><column-value><![CDATA[");
		sb.append(getStickyNeverExpired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stickyExpireDate</column-name><column-value><![CDATA[");
		sb.append(getStickyExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soundLink</column-name><column-value><![CDATA[");
		sb.append(getSoundLink());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VcmsArticle.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VcmsArticle.class
		};
	private String _articleId;
	private String _originalArticleId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private String _createdByUser;
	private String _originalCreatedByUser;
	private Date _createdDate;
	private String _modifiedByUser;
	private Date _modifiedDate;
	private String _approvedByUser;
	private Date _approvedDate;
	private String _publishedByUser;
	private Date _publishedDate;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private String _title;
	private String _lead;
	private String _content;
	private double _version;
	private boolean _hasImage;
	private String _imageTitle;
	private String _image;
	private String _author;
	private String _source;
	private String _language;
	private String _originalLanguage;
	private int _userHit;
	private boolean _discussible;
	private boolean _originalDiscussible;
	private boolean _setOriginalDiscussible;
	private boolean _hasAttachment;
	private boolean _hasPoll;
	private String _pollId;
	private Date _effectiveDate;
	private Date _expireDate;
	private boolean _sticky;
	private boolean _originalSticky;
	private boolean _setOriginalSticky;
	private boolean _stickyNeverExpired;
	private Date _stickyExpireDate;
	private String _categoryId;
	private String _originalCategoryId;
	private String _soundLink;
	private long _columnBitmask;
	private VcmsArticle _escapedModel;
}