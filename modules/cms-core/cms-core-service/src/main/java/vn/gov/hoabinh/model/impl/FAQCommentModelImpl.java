/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gov.hoabinh.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import vn.gov.hoabinh.model.FAQComment;
import vn.gov.hoabinh.model.FAQCommentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FAQComment service. Represents a row in the &quot;FAQComment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FAQCommentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FAQCommentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FAQCommentImpl
 * @see FAQComment
 * @see FAQCommentModel
 * @generated
 */
@ProviderType
public class FAQCommentModelImpl extends BaseModelImpl<FAQComment>
	implements FAQCommentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a f a q comment model instance should use the {@link FAQComment} interface instead.
	 */
	public static final String TABLE_NAME = "FAQComment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "answerid", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "commName", Types.VARCHAR },
			{ "commEmail", Types.VARCHAR },
			{ "approved", Types.BOOLEAN },
			{ "approveByUser", Types.VARCHAR },
			{ "approvedDate", Types.TIMESTAMP },
			{ "commDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answerid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("approveByUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table FAQComment (id_ LONG not null primary key,answerid LONG,content VARCHAR(75) null,commName VARCHAR(75) null,commEmail VARCHAR(75) null,approved BOOLEAN,approveByUser VARCHAR(75) null,approvedDate DATE null,commDate DATE null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table FAQComment";
	public static final String ORDER_BY_JPQL = " ORDER BY faqComment.commDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY FAQComment.commDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gov.hoabinh.model.FAQComment"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gov.hoabinh.model.FAQComment"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(vn.gov.hoabinh.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gov.hoabinh.model.FAQComment"),
			true);
	public static final long ANSWERID_COLUMN_BITMASK = 1L;
	public static final long APPROVED_COLUMN_BITMASK = 2L;
	public static final long COMMDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(vn.gov.hoabinh.service.util.ServiceProps.get(
				"lock.expiration.time.vn.gov.hoabinh.model.FAQComment"));

	public FAQCommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FAQComment.class;
	}

	@Override
	public String getModelClassName() {
		return FAQComment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("answerid", getAnswerid());
		attributes.put("content", getContent());
		attributes.put("commName", getCommName());
		attributes.put("commEmail", getCommEmail());
		attributes.put("approved", getApproved());
		attributes.put("approveByUser", getApproveByUser());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("commDate", getCommDate());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long answerid = (Long)attributes.get("answerid");

		if (answerid != null) {
			setAnswerid(answerid);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String commName = (String)attributes.get("commName");

		if (commName != null) {
			setCommName(commName);
		}

		String commEmail = (String)attributes.get("commEmail");

		if (commEmail != null) {
			setCommEmail(commEmail);
		}

		Boolean approved = (Boolean)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}

		String approveByUser = (String)attributes.get("approveByUser");

		if (approveByUser != null) {
			setApproveByUser(approveByUser);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		Date commDate = (Date)attributes.get("commDate");

		if (commDate != null) {
			setCommDate(commDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getAnswerid() {
		return _answerid;
	}

	@Override
	public void setAnswerid(long answerid) {
		_columnBitmask |= ANSWERID_COLUMN_BITMASK;

		if (!_setOriginalAnswerid) {
			_setOriginalAnswerid = true;

			_originalAnswerid = _answerid;
		}

		_answerid = answerid;
	}

	public long getOriginalAnswerid() {
		return _originalAnswerid;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public String getCommName() {
		if (_commName == null) {
			return StringPool.BLANK;
		}
		else {
			return _commName;
		}
	}

	@Override
	public void setCommName(String commName) {
		_commName = commName;
	}

	@Override
	public String getCommEmail() {
		if (_commEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _commEmail;
		}
	}

	@Override
	public void setCommEmail(String commEmail) {
		_commEmail = commEmail;
	}

	@Override
	public boolean getApproved() {
		return _approved;
	}

	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		_columnBitmask |= APPROVED_COLUMN_BITMASK;

		if (!_setOriginalApproved) {
			_setOriginalApproved = true;

			_originalApproved = _approved;
		}

		_approved = approved;
	}

	public boolean getOriginalApproved() {
		return _originalApproved;
	}

	@Override
	public String getApproveByUser() {
		if (_approveByUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _approveByUser;
		}
	}

	@Override
	public void setApproveByUser(String approveByUser) {
		_approveByUser = approveByUser;
	}

	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@Override
	public Date getCommDate() {
		return _commDate;
	}

	@Override
	public void setCommDate(Date commDate) {
		_columnBitmask = -1L;

		_commDate = commDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FAQComment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FAQComment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FAQComment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FAQCommentImpl faqCommentImpl = new FAQCommentImpl();

		faqCommentImpl.setId(getId());
		faqCommentImpl.setAnswerid(getAnswerid());
		faqCommentImpl.setContent(getContent());
		faqCommentImpl.setCommName(getCommName());
		faqCommentImpl.setCommEmail(getCommEmail());
		faqCommentImpl.setApproved(getApproved());
		faqCommentImpl.setApproveByUser(getApproveByUser());
		faqCommentImpl.setApprovedDate(getApprovedDate());
		faqCommentImpl.setCommDate(getCommDate());
		faqCommentImpl.setUserId(getUserId());

		faqCommentImpl.resetOriginalValues();

		return faqCommentImpl;
	}

	@Override
	public int compareTo(FAQComment faqComment) {
		int value = 0;

		value = DateUtil.compareTo(getCommDate(), faqComment.getCommDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FAQComment)) {
			return false;
		}

		FAQComment faqComment = (FAQComment)obj;

		long primaryKey = faqComment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FAQCommentModelImpl faqCommentModelImpl = this;

		faqCommentModelImpl._originalAnswerid = faqCommentModelImpl._answerid;

		faqCommentModelImpl._setOriginalAnswerid = false;

		faqCommentModelImpl._originalApproved = faqCommentModelImpl._approved;

		faqCommentModelImpl._setOriginalApproved = false;

		faqCommentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FAQComment> toCacheModel() {
		FAQCommentCacheModel faqCommentCacheModel = new FAQCommentCacheModel();

		faqCommentCacheModel.id = getId();

		faqCommentCacheModel.answerid = getAnswerid();

		faqCommentCacheModel.content = getContent();

		String content = faqCommentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			faqCommentCacheModel.content = null;
		}

		faqCommentCacheModel.commName = getCommName();

		String commName = faqCommentCacheModel.commName;

		if ((commName != null) && (commName.length() == 0)) {
			faqCommentCacheModel.commName = null;
		}

		faqCommentCacheModel.commEmail = getCommEmail();

		String commEmail = faqCommentCacheModel.commEmail;

		if ((commEmail != null) && (commEmail.length() == 0)) {
			faqCommentCacheModel.commEmail = null;
		}

		faqCommentCacheModel.approved = getApproved();

		faqCommentCacheModel.approveByUser = getApproveByUser();

		String approveByUser = faqCommentCacheModel.approveByUser;

		if ((approveByUser != null) && (approveByUser.length() == 0)) {
			faqCommentCacheModel.approveByUser = null;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			faqCommentCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			faqCommentCacheModel.approvedDate = Long.MIN_VALUE;
		}

		Date commDate = getCommDate();

		if (commDate != null) {
			faqCommentCacheModel.commDate = commDate.getTime();
		}
		else {
			faqCommentCacheModel.commDate = Long.MIN_VALUE;
		}

		faqCommentCacheModel.userId = getUserId();

		return faqCommentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", answerid=");
		sb.append(getAnswerid());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", commName=");
		sb.append(getCommName());
		sb.append(", commEmail=");
		sb.append(getCommEmail());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append(", approveByUser=");
		sb.append(getApproveByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", commDate=");
		sb.append(getCommDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.gov.hoabinh.model.FAQComment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerid</column-name><column-value><![CDATA[");
		sb.append(getAnswerid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commName</column-name><column-value><![CDATA[");
		sb.append(getCommName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commEmail</column-name><column-value><![CDATA[");
		sb.append(getCommEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approveByUser</column-name><column-value><![CDATA[");
		sb.append(getApproveByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commDate</column-name><column-value><![CDATA[");
		sb.append(getCommDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FAQComment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FAQComment.class
		};
	private long _id;
	private long _answerid;
	private long _originalAnswerid;
	private boolean _setOriginalAnswerid;
	private String _content;
	private String _commName;
	private String _commEmail;
	private boolean _approved;
	private boolean _originalApproved;
	private boolean _setOriginalApproved;
	private String _approveByUser;
	private Date _approvedDate;
	private Date _commDate;
	private long _userId;
	private long _columnBitmask;
	private FAQComment _escapedModel;
}